1. Array length :
The length property returns or sets the number of elements in an array.
The syntax to access the length property is:
arr.length;
Syntax to assign the Array length:
array.length = <Integer>
This can be used to truncate or extend a given array.

2. Array reverse() :
The reverse() method returns the array in reverse order.
arr.reverse();
The reverse() method reverses the order of elements in place, it means the method changes the original array.

3. Array sort() :
The sort() method sorts the items of an array in a specific order (ascending or descending).
arr.sort(compareFunction)
compareFunction (optional) - It is used to define a custom sort order.
Returns the array after sorting the elements of the array in place (meaning that it changes the original array and no copy is made).

When compareFunction is not passed,
All non-undefined array elements are first converted to strings.
These strings are then compared using their UTF-16 code point value.
The sorting is done in ascending order.
All undefined elements are sorted to the end of the array.

When compareFunction is passed,
All non-undefined array elements are sorted according to the return value of compareFunction.
All undefined elements are sorted to the end of the array and compareFunction is not called for them.

Any compareFunction has the following syntax:

function (a, b){
    // sorting logic
    // return a Number 
}
The sort() method compares all values of the array by passing two values at a time to the compareFunction. The two parameters a and b represent these two values respectively.
The compareFunction should return a Number. This returned value is used to sort the elements in the following way:
If returned value < 0, a is sorted before b (a comes before b).
If returned value > 0, b is sorted before a (b comes before a).
If returned value == 0, a and b remain unchanged relative to each other.

4. Array fill() :
The fill() method returns an array by filling all elements with a specified value.
arr.fill(value, start, end);
The fill() method can take 3 parameters:
value - Value to fill the array with.
start (optional) - Start index (default is 0).
end (optional) - End index (default is Array.length), which is always excluded.

Returns the modified array, filled with value from start to end.
If start or end is negative, indexes are counted backwards.
Since fill() is a mutator method, it changes the array itself (not a copy) and returns it.
passing invalid index result in no change.

5. Array join() :
The join() method returns a new string by concatenating all of the elements in an array, separated by a specified separator.
arr.join(separator);
default seperator is comma ,.

The join() method does not change the original array.
Elements like undefined, null, or empty array have an empty string representation.

6. Array toString() :
The toString() method returns a string formed by the elements of the given array.
arr.toString();
The toString() method does not take any parameters.
Returns a string representing the values of the array separated by a comma;
The toString() method does not change the original array.
Elements like undefined, null, or empty array, have an empty string representation.
toString() with Nested Arrays returns string representation of the nested array by flattening the array.

7. Array pop() :
The pop() method removes the last element from an array and returns that element.
Returns undefined if the array is empty.
arr.pop();
The pop() method does not have any parameters.
This method changes the original array and its length.

8. Array shift() :
The shift() method removes the first element from an array and returns that element.
arr.shift();
The shift() method does not accept any arguments.
Returns undefined if the array is empty.
After removing the element at the 0th index, it shifts other values to consecutive indexes down.
This method changes the original array and its length.

9. Array push() :
The push() method adds zero or more elements to the end of the array.
arr.push(element1, element2, ..., elementN);
Returns the new (after appending the arguments) length of the array upon which the method was called.
This method changes the original array and its length.

10. Array unshift() :
The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.
arr.unshift(element1, element2, ..., elementN);
Returns the new (after adding arguments to the beginning of array) length of the array upon which the method was called.
This method changes the original array and its length.

11. Array concat() :
The concat() method returns a new array by merging two or more values/arrays.
arr.concat(value1, value2, ..., valueN);
Returns a newly created array after merging all arrays/values passed in the argument.
The concat() method first creates a new array with the elements of the object on which the method is called. It then sequentially adds arguments or the elements of arguments (for arrays). 

Concatenating nested arrays :
The concat() method returns the shallow copy of the concatenated elements in the following way:
It copies object references to the new array. (For example: passing a nested array) So if the referenced object is modified, the changes are visible in the returned new array.
It copies the value of strings and numbers to the new array.

12. Array splice() :
The splice() method modifies an array (adds, removes or replaces elements).
arr.splice(start, deleteCount, item1, ..., itemN);
The splice() method takes in:
start - The index from where the array is changed.
deleteCount (optional) - The number of items to remove from start.
item1, ..., itemN (optional) - The elements to add to the start index. If not specified, splice() will only remove elements from the array.

Returns an array containing the deleted elements.
Note: The splice() method changes the original array.

Using splice() for different deleteCount values
If start > array.length, splice() does not delete anything and starts appending arguments to the end of the array.
If start < 0, the index is counted from backward (array.length + start). For example, -1 is the last element.
If array.length + start < 0, it will begin from index 0.

If deleteCount is omitted or is greater than the number of elements left in the array, it deletes all elements from start to end of the array.
If deleteCount is 0 or negative, no elements are removed. But, at least one new element should be specified.

13. Array lastIndexOf() :
The lastIndexOf() method returns the index of the last occurrence of a specified element in the array.
arr.lastIndexOf(searchElement, fromIndex);
searchElement - The element to locate in the array.
fromIndex (optional) - The index to start searching backwards. By default it is array.length - 1.
The lastIndexOf() method returns:

the last index of the element in the array if it is present at least once.
-1 if the element is not found in the array.
Note: lastIndexOf() compares searchElement to elements of the Array using strict equality (similar to triple-equals operator or ===).

If fromIndex is a negative number then the index is calculated backward. 

14. Array indexOf() :
The indexOf() method returns the first index of occurance of an array element, or -1 if it is not found.
arr.indexOf(searchElement, fromIndex);
searchElement - The element to locate in the array.
fromIndex (optional) - The index to start the search at. By default, it is 0.
Returns the first index of the element in the array if it is present at least once.
Returns -1 if the element is not found in the array.
Note: indexOf() compares searchElement to elements of the Array using strict equality (similar to triple-equals operator or ===).
Notes:
If fromIndex >= array.length, array is not searched and -1 is returned.
If fromIndex < 0, :  array.length + index; (from here started searching forward).

15. Array of() Method :
The of() method creates a new array instance from the given arguments.
Array.of(element0, element1, ..., elementN);
The of() method, being a static method, is called using the Array class name.

Array of() Method and Array Constructor :
The difference between the Array.of() and the Array constructor is the handling of the arguments.

On passing a number to the Array constructor creates a new array with length equal to number.

However in the Array.of() method if we pass any number it creates array with that number as an element. 

16. Array slice() :
The slice() method returns a shallow copy of a portion of an array into a new array object.
arr.slice(start, end);

The slice() method takes in:
start (optional) - Starting index of the selection. If not provided, the selection starts at start 0.
end (optional) - Ending index of the selection (exclusive). If not provided, the selection ends at the index of the last element.

Returns a new array containing the extracted elements.

you can also use negative start and end indices. The index of the last element is -1, the index of the second last element is -2, and so on.

The slice() method shallow copies the elements of the array in the following way:

It copies object references to the new array. (For example, a nested array) So if the referenced object is modified, the changes are visible in the returned new array.
It copies the value of strings and numbers to the new array.

17. Array findIndex() :
The findIndex() method returns the index of the first array element that satisfies the provided test function or else returns -1.
arr.findIndex(callback(element),thisArg);
The findIndex() method can take two parameters:
callback - Function to execute on each element of the array. It takes in:
element - The current element of array.
thisArg (optional) - Object to use as this inside callback.

18. Array find() :
The find() method returns the value of the first array element that satisfies the provided test function.
similar to findIndex but it returns element instaed of index.

19.Array includes() :
The includes() method checks if an array contains a specified element or not.
arr.includes(valueToFind, fromIndex);
The includes() method can take two parameters:
searchValue- The value to search for.
fromIndex (optional) - The position in the array at which to begin the search. By default, it is 0.
Note: For negative values, the search starts from array.length + fromIndex (Counting from backward). For example, -1 represents the last element.

The includes() method returns:
true if searchValue is found anywhere within the array
false if searchValue is not found anywhere within the array.

20. Array reduce() :
The reduce() method executes a reducer function on each element of the array and returns a single output value.
arr.reduce(callback(accumulator, currentValue), initialValue);

reduce() Parameters
The reduce() method takes in:
callback - The callback function to execute on each array element (except the first element if no initialValue is provided). It takes in
accumulator - It accumulates the callback's return values.
currentValue - The current element being passed from the array.
initialValue (optional) - A value that will be passed to callback() on first call. If not provided, the first element acts as the accumulator on the first call and callback() won't execute on it.
Note: Calling reduce() on an empty array without initialValue will throw TypeError.

Notes:
reduce() executes the given function for each value from left to right.
reduce() does not change the original array.
It is almost always safer to provide initialValue.

21. Array reduceRight() :
The reduceRight() method reduces the array to a single value by executing a callback function on two values of the array (from right to left).
similar to reduce but it executes from right to left(reverse of reduce).

22. 22.Array isArray() : :
The isArray() method checks whether the passed argument is an array or not.
Array.isArray(value);

The isArray() method returns:
true if the passed value is Array
false if the passed value is not Array
Note: This method always returns false for TypedArray instances.

23. Array filter() :
The filter() method returns a new array with all elements that pass the test defined by the given function.
arr.filter(callback(element), thisArg);

The filter() method takes in:
callback - The test function to execute on each array element; returns true if element passes the test, else false. It takes in:
element - The current element being passed from the array.
thisArg (optional) - The value to use as this when executing callback. By default, it is undefined.

filter() does not change the original array.
filter() does not execute callback for array elements without values.

24. Array map() :
The map() method creates a new array with the results of calling a function for every array element.
arr.map(callback(currentValue), thisArg);

map() Parameters
The map() method takes in:

callback - The function called for every array element. Its return values are added to the new array. It takes in:
currentValue - The current element being passed from the array.
thisArg (optional) - Value to use as this when executing callback. By default, it is undefined.

map() does not change the original array.
map() executes callback once for each array element in order.
map() does not execute callback for array elements without values.

map() assigns undefined to the new array if the callback function returns undefined or nothing.

25. Array forEach() :
The forEach() method executes a provided function for each array element.
arr.forEach(callback(currentValue), thisArg);

The forEach() method takes in:

callback - The callback function to execute on every array element. It takes in:
currentValue - The current element being passed from the array.
thisArg (optional) - Value to use as this when executing callback. By default, it is undefined.

forEach Returns undefined.

Notes:
forEach() does not change the original array.
forEach() executes callback once for each array element in order.
forEach() does not execute callback for array elements without values.

26. Array some() :
The some() method tests whether any of the array elements pass the given test function.
returns true (pass test) or false.
arr.some(callback(currentValue), thisArg);

27. Array.every() :
The every() method checks if all the array elements pass the given test function.
returns true (pass test) or false.
arr.every(callback(currentValue), thisArg);

28. Array entries() :
The entries() method returns a new Array Iterator object containing key/value pairs for each array index.
arr.entries();
The entries() method does not take any parameters.
Note: The entries() method does not change the original array.

29. Array keys() :
The keys() method returns a new Array Iterator object that contains the keys for each element in the array.
Same as entries but it gives only keys.

30. Array values() :
The values() method returns a new Array Iterator object that contains the values for each index in the array.
Same as entries but it gives only values.

31. Array.from() :
The from() method creates a new array from any array-like or iterable object.
Array.from(arraylike, mapFunc, thisArg);
The from() method, being a static method, is called using the Array class name.

The from() method can take three parameters:

arraylike - Array-like or iterable object to convert to an array.
mapFunc (optional) - Map function that is called on each element.
thisArg (optional) - Value to use as this when executing mapFunc.

Returns a new Array instance.

Iterable objects that have length property and have indexed elements like String, Map or Set.

32. Array constructor :
The constructor property returns the constructor function for the array.
arr.constructor;
The constructor is a property in JavaScript, so it doesn't take any parameters.

33. Array copyWithin() :
The copyWithin() method copies array elements from one position to another in the given array.
arr.copyWithin(target, start, end);

The copyWithin() method can take three parameters:
target - The index position to copy the elements to.
start (optional) - The index position to start copying elements from. If omitted, it will copy from index 0.
end (optional) - The index position to stop copying elements from (end element not included). If omitted, it will copy until the last index.

If any of the arguments are negative, the index will be counted backward. For example, -1 represents the last element, and so on.

Returns the modified array after copying the elements.
Notes: The copyWithin() method:
overwrites the original array.
does not change the length of the original array.

34. Array.toLocaleString() :
The Array.toLocaleString() method returns a string representing the elements of the array in a particular locale.
arr.toLocaleString(locales, options);

The toLocaleString() method can take two parameters:
locales (optional) - A convention or formatting based on particular geography.
options (optional) - An object with configuration properties.

 This method converts each array element to Strings using their toLocaleString methods and separates them by a comma.

 35. Array flat() :
 The flat() method creates a new array by flattening a nested array up to the specified depth.
arr.flat(depth);
depth - Integer specifying how deep a nested array should be flattened. Its default value is 1.

Returns a flatted array with the sub-array elements concatenated into it.
Notes: The flat() method:
does not change the original array.
removes empty slots in arrays.

36. Array flatMap() :
The flatMap() method first maps each element of an array using a mapping function, then flattens it into a new array.
arr.flatMap(callback(currentValue),thisArg);

The flatMap() method can take two parameters:
callback - The callback function to initially execute on each array element. It takes in:
currentValue - The current element being passed from the array.
thisArg (optional) - Value to use as this when executing callback.

Returns a new array after mapping every element using callback
Notes:
The flatMap() method does not change the original array.
The flatMap() method is equivalent to array.map().flat().


// *** The End ***

