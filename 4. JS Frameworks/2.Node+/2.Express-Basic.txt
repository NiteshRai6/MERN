Express.js Basic Topics :
1. Express Intro
2. Middleware
3. Routing in Express
4. Handling Requests and Responses
5. Serving Static Files in Express
6. Express Key Notes
7. Templating Engines
8. RESTful API
9. Database Integration



1. Express Intro :
Express.js, often referred to simply as "Express," is a lightweight and flexible web application framework for Node.js. It provides a robust set of features for building single-page, multi-page, and hybrid web applications. Essentially, Express.js acts as a layer built on top of Node.js that simplifies the process of managing routes, handling requests and responses, and integrating middleware.

Express simplifies the process of setting up a server and handling HTTP requests and responses. Instead of manually writing code to handle different routes, parse requests, and send responses, Express allows developers to use a more straightforward syntax to achieve these tasks.

Advantages of Using Express.js :
A. Simplicity
B. Flexibility
C. Middleware Support
D. Routing
E. Community and Ecosystem
F. Performance

* Setting Up a New Express Project :
A. mkdir my-express-app
cd my-express-app

B. npm init
npm install express --save

C. Example>
const express = require('express');
const app = express();
app.get('/', (req, res) => {
  res.send('Hello, world!');
});
app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

D. node index.js

* The --save flag ensures that Express is added to the dependencies section of your package.json file.


2. Middleware :
Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle. Middleware can be thought of as the building blocks of an Express application, used to modify requests and responses, implement logic, and control the flow of an application.

* Middleware functions can perform the following tasks :
A. Execute any code.
B. Make changes to the request and response objects.
C. End the request-response cycle.
D. Call the next middleware function in the stack.

* Middleware functions can be used for various purposes, including :
A. Logging
B. Authentication
C. Error handling
D. Parsing request bodies
E. Serving static files

Example : A simple custom middleware function>
const express = require('express');
const app = express();

app.use((req, res, next) => {
  console.log(`${req.method} request for '${req.url}'`);
  next(); // Pass control to the next handler
});

app.get('/', (req, res) => {
  res.send('Hello, Middleware!');
});

app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});

The app.use() method adds middleware to the application. This middleware logs every incoming request to the console.
The next() function is called to pass control to the next middleware or route handler.

* Using Third-Party Middleware :
Express has a large ecosystem of third-party middleware that you can use to add functionality to your application without writing it from scratch. 

A. body-parser : 
Parses incoming request bodies in a middleware before your handlers, available under req.body. installation : npm install body-parser
Example>
const bodyParser = require('body-parser');
const app = express();

// Parse application/json
app.use(bodyParser.json());

app.post('/data', (req, res) => {
  res.send(`Received data: ${JSON.stringify(req.body)}`);
});

B. morgan : 
A middleware for logging HTTP requests and errors.
const morgan = require('morgan');
// Log all requests
app.use(morgan('tiny'));

C. cors : 
A middleware for enabling Cross-Origin Resource Sharing (CORS), which is essential for APIs.
const cors = require('cors');
// Enable CORS for all routes
app.use(cors());


3. Routing in Express :
It allows you to define how your application responds to various HTTP requests (GET, POST, PUT, DELETE) for specific endpoints (URLs). In an Express application, routes are defined to direct the incoming requests to the appropriate handlers. 

* express.Router() function allows you to create mini-applications, each with its own routes and middleware.

Example>
// routes/users.js
const express = require('express');
const router = express.Router();

router.get('/', (req, res) => {
  res.send('GET request to the users page (from separate file)');
});

router.post('/', (req, res) => {
  res.send('POST request to create a new user (from separate file)');
});

module.exports = router;

Example>
const express = require('express');
const app = express();
const usersRouter = require('./routes/users');

// Use the users router
app.use('/users', usersRouter);

app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});

* Route Grouping :
Express allows you to group routes and apply middleware to specific groups of routes, which can help you manage routes that share common characteristics or requirements.


4. Handling Requests and Responses :
The request object (req) and response object (res) are central to this process, allowing you to interact with the client’s request and provide a response accordingly.

* Request Object :
The request object in Express (req) contains information about the HTTP request made by the client. This includes parameters, query strings, the request body, headers, and more.

A. Route Parameters (req.params) :
Route parameters are dynamic segments of the URL that are captured by Express and can be accessed using req.params :
app.get('/users/:id', (req, res) => {
  const userId = req.params.id;
  res.send(`User ID: ${userId}`);
});
If a user visits http://localhost:3000/users/123, req.params.id will be 123.

B. Query Strings (req.query) :
Query strings are key-value pairs appended to the URL after a ?. They can be accessed using req.query.
app.get('/search', (req, res) => {
  const searchTerm = req.query.q;
  res.send(`Search term: ${searchTerm}`);
});
If a user visits http://localhost:3000/search?q=express, req.query.q will be express.

Note : Route parameters and query strings are used to capture dynamic values from the URL.

C. Request Body (req.body) :
The request body contains data sent by the client, typically in POST, PUT, or PATCH requests. Accessing the body requires middleware like express.json() or express.urlencoded().
Example>
app.use(express.json());
app.post('/users', (req, res) => {
  const username = req.body.username;
  res.send(`User created: ${username}`);
});
In this case, if the client sends a JSON payload like {"username": "JohnDoe"}, req.body.username will be JohnDoe.

D. Request Headers (req.headers) :
Headers provide metadata about the request and can be accessed using req.headers.
app.get('/headers', (req, res) => {
  const userAgent = req.headers['user-agent'];
  res.send(`User-Agent: ${userAgent}`);
});
This will return the User-Agent string, which provides information about the client making the request.

* Response Object :
The response object (res) is used to send a response back to the client. Express provides various methods to send different types of responses, set status codes, and manage headers.

A. Sending Text Responses :
You can send plain text back to the client using res.send().
app.get('/', (req, res) => {
  res.send('Hello, World!');
});

B. Sending JSON Responses :
JSON is a common format for sending structured data. Use res.json() to send a JSON response.
app.get('/user', (req, res) => {
  res.json({ name: 'John Doe', age: 30 });
});

C. Sending Files :
You can send files as a response using res.sendFile().
app.get('/download', (req, res) => {
  res.sendFile(__dirname + '/files/sample.pdf');
});
Here, __dirname is used to construct the absolute path to the file.

D. Redirecting :
You can redirect the client to a different URL using res.redirect().
app.get('/google', (req, res) => {
  res.redirect('https://www.google.com');
});

* Setting Status Codes and Headers :
HTTP status codes are used to indicate the result of the request. You can set the status code using res.status().
app.get('/not-found', (req, res) => {
  res.status(404).send('Page not found');
});
Here, 404 indicates that the requested resource was not found.

* You can set custom headers in the response using res.set() or res.header().
app.get('/custom-header', (req, res) => {
  res.set('X-Custom-Header', 'CustomValue');
  res.send('Custom header set');
});
This response will include the header X-Custom-Header: CustomValue.


5. Serving Static Files in Express :
Serving static files like HTML, CSS, JavaScript, images, and other assets is a common requirement in web applications. Express includes a middleware function called express.static() that serves static assets. This function is used to specify a directory where static files are located. When a request matches a file in that directory, Express will automatically serve the file without the need to define specific routes for each asset.

// Serve static files from the "public" directory
app.use(express.static('public'));
The public directory is specified as the location for static files.
If a file named index.html exists in the public directory, it can be accessed directly via http://localhost:3000/index.html.

* In the root of your Express project, create a directory named public.
Inside this directory, you can place your static assets like HTML, CSS, JavaScript, and image files.
Use express.static() to serve files from the public directory.

Example>
const express = require('express');
const app = express();
const path = require('path');

// Set up the "public" directory
app.use(express.static(path.join(__dirname, 'public')));

app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});
With this setup:
You can access public/style.css at http://localhost:3000/style.css.
You can access public/scripts/app.js at http://localhost:3000/scripts/app.js.

* path module :
The path module provides utilities for working with file and directory paths in a way that is platform-independent.

A. path.join() :
This method joins multiple segments of a path into a single path string. It ensures that the correct path separators (e.g., / on Unix, \ on Windows) are used.
const path = require('path');
const publicDirPath = path.join(__dirname, 'public');
console.log(publicDirPath); // Outputs the full path to the public directory

If __dirname is /home/user/project and you join it with public, publicDirPath will be /home/user/project/public.

B. path.resolve() :
This method resolves a sequence of paths or path segments into an absolute path. If no path segments are provided, it resolves to the current working directory.
Example>
const path = require('path');
const filePath = path.resolve('public', 'index.html');
console.log(filePath); // Outputs the absolute path to the index.html file

If you are in /home/user/project, this will resolve to /home/user/project/public/index.html.

* Serving a Specific File :
Sometimes, you might want to serve a specific file that isn’t located in the public directory or needs special handling. You can use res.sendFile() in conjunction with the path module.
app.get('/download', (req, res) => {
  const filePath = path.join(__dirname, 'files', 'sample.pdf');
  res.sendFile(filePath);
});

This code serves the sample.pdf file located in the files directory when the /download route is accessed.


6. Express Key Notes :
* express implementation :
A. Importing Express : 
Typically, you first import the Express module at the top of your file like this.
const express = require('express');
This imports the Express module and assigns it to the variable express.

B. Creating an Instance of Express :
const app = express();
This line is calling the express() function, which is the default export of the Express module. The function call returns an instance of an Express application, which is stored in the variable app.

The reason for this is that the Express module itself is a function. When you invoke it, it creates an instance of an Express application that you can use to define routes, middleware, and other configurations for your web server.

By contrast, when you import other packages, they might export objects, functions, classes, or other types of values that you use directly without needing to create an instance.

* Data Transmission Over the Network :
When a frontend (like React) communicates with a backend (like Node.js), the data has to be sent over the network (e.g., via HTTP requests). The data sent over the network is typically in the form of strings, not JavaScript objects. 
On the backend, this JSON string needs to be parsed back into a JavaScript object so it can be manipulated and used in the application logic.

JSON (JavaScript Object Notation) is a lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate. It’s essentially a string representation of a JavaScript object.

Example in a Full Cycle :
A. Frontend (React) :
A form is filled out by a user, and the data is stored in a JavaScript object.
This object is converted into a JSON string using JSON.stringify() and sent to the backend via a POST request.

B. Backend (Node.js) :
The server receives the JSON string and parses it into a JavaScript object using express.json() middleware.
The server processes the data, performs some actions (like storing it in a database), and might send a response back to the frontend, again in JSON format.

C. Frontend (React) :
The frontend receives the JSON response from the backend and parses it back into a JavaScript object using JSON.parse().

*  For handling a collection of data, the most commonly used format is an 
array of objects. This format is widely used in both frontend and backend.

For collection of Data :
A. React to Node : array of objects converted to JSON. for Network Transmission.
B. Node : Convert JSON to array of objects and manipulate it accordingly.
C.Node to React : array of objects converted to JSON. for Network Transmission.
D.React : Convert JSON to array of objects and manipulate it accordingly.

* Parsing :
Parsing refers to the process of converting raw JSON string into a JavaScript object. This involves analyzing the JSON string and breaking it down into its component parts so that it can be used as a regular object in your code.

* app.use() :
app.use() is a method in Express.js used to mount middleware functions on the Express application. Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle.

* express.json() :
express.json() is a built-in middleware function in Express.js. It parses incoming requests with JSON payloads and is based on the body-parser library (which used to be a separate package but is now included in Express as of version 4.16.0).
When this middleware is used, it parses the body of the incoming request if the Content-Type of the request is application/json, and then it populates the req.body property with the parsed JSON object.

express.urlencoded() :
URL-Encoded Data :
URL-encoded data is a way to encode form data in key-value pairs. It’s the format used when data is submitted from an HTML form using the application/x-www-form-urlencoded content type.
This format is commonly used when submitting form data via the POST method, although it can also be used with GET requests (as query strings in the URL).

express.urlencoded() is a built-in middleware function in Express.js that parses incoming requests with URL-encoded payloads.
It extracts the data from the body of the incoming request and makes it available under the req.body object.

app.use(express.urlencoded({ extended: true }));

How It Works :
A. Form Submission :
When a form is submitted from the frontend with the content type application/x-www-form-urlencoded, the data is encoded in the format key1=value1&key2=value2.

B. Parsing the Data :
The express.urlencoded() middleware parses this URL-encoded data and converts it into a JavaScript object. For example:
If the data is username=john_doe&password=123456, it will be parsed into :
{
  username: 'john_doe',
  password: '123456'
}

C. Accessing the Data :
After parsing, the data is accessible via req.body. So in the example above, req.body.username would be 'john_doe', and req.body.password would be '123456'.

D. The extended Option:
The extended option in express.urlencoded() determines the parsing mechanism.
extended: false: This uses the querystring library to parse the URL-encoded data, which allows only simple, shallow parsing.

extended: true: This uses the querystring library for parsing, allowing for rich objects and arrays to be encoded into the URL-encoded format. For example, it allows parsing nested objects like:

user[name]=john&user[age]=30

{
  user: {
    name: 'john',
    age: 30
  }
}

* Form Validation :
Validating user input is crucial for ensuring the integrity and security of your application. Express.js provides several libraries to help with this, such as express-validator.
npm install express-validator

You can use express-validator to add validation checks to your routes. Here's an example:
const { body, validationResult } = require('express-validator');

app.post(
  '/submit-form',
  [
    // Validate name (must not be empty)
    body('name').notEmpty().withMessage('Name is required'),

    // Validate email (must be a valid email address)
    body('email').isEmail().withMessage('Please enter a valid email address')
  ],
  (req, res) => {
    const errors = validationResult(req);

    if (!errors.isEmpty()) {
      // Handle validation errors
      return res.status(400).json({ errors: errors.array() });
    }

    // If validation passed, process the form data
    const name = req.body.name;
    const email = req.body.email;
    
    res.send(`Form submitted successfully! Name: ${name}, Email: ${email}`);
  }
);


7. Templating Engines :
Templating engines are tools used in web development to generate dynamic HTML pages on the server side. Instead of writing static HTML pages, a templating engine allows you to create templates that contain placeholders for data. When the server processes these templates, it replaces the placeholders with actual data and sends the resulting HTML to the client's browser.

Express.js supports several templating engines out of the box, such as Pug (formerly known as Jade), EJS (Embedded JavaScript), and Handlebars. Each has its own syntax and features, but they all serve the same purpose: to generate dynamic HTML content.

Example> npm install ejs :
const express = require('express');
const app = express();

// Set the view engine to EJS
app.set('view engine', 'ejs');

// Set the directory for views
app.set('views', './views');

Once your templating engine is set up, you can render views using the res.render method. You pass the name of the view (template file) and an optional object containing data to inject into the template.

views/index.ejs :
<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
  </head>
  <body>
    <h1>Hello <%= name %>!</h1>
  </body>
</html>

Express route :
app.get('/', (req, res) => {
  res.render('index', { title: 'Home', name: 'John' });
});

the output sent to the client's browser would be :
<!DOCTYPE html>
<html>
  <head>
    <title>Home</title>
  </head>
  <body>
    <h1>Hello John!</h1>
  </body>
</html>


8. RESTful APIs :
Building RESTful APIs in Express.js
RESTful APIs (Representational State Transfer) are a popular way to structure web services. They follow specific principles and patterns to ensure that APIs are consistent, scalable, and easy to understand. 

* REST Principles :
REST is an architectural style that uses a stateless, client-server communication protocol, typically HTTP. The core principles of REST include:

A. Statelessness : 
Each request from a client to a server must contain all the information the server needs to fulfill the request. The server does not store any client context between requests.

B. Uniform Interface : 
RESTful APIs use standard HTTP methods (GET, POST, PUT, DELETE, etc.) to perform CRUD (Create, Read, Update, Delete) operations on resources.

C. Resources and URIs : 
Resources are identified by URIs (Uniform Resource Identifiers). Each resource in a RESTful API has a unique URI.

D. Representation of Resources : 
Clients interact with resources via representations, such as JSON or XML, which are returned by the API.

E. Stateless Communication : 
Communication between client and server must be stateless, meaning each request is independent and does not rely on any prior requests.

Designing RESTful Endpoints :
When designing RESTful endpoints, the goal is to create clear, logical URIs that represent resources and use appropriate HTTP methods for operations.
GET: Retrieve data from the server.
POST: Create a new resource.
PUT: Update an existing resource.
DELETE: Remove a resource.

Example : RESTful API> **imp**
const express = require('express');
const app = express();
app.use(express.json());

let users = [];  // In-memory user storage

// CREATE a new user
app.post('/users', (req, res) => {
  const user = { id: Date.now(), name: req.body.name };
  users.push(user);
  res.status(201).json(user);
});

// READ all users
app.get('/users', (req, res) => {
  res.json(users);
});

// READ a single user by ID
app.get('/users/:id', (req, res) => {
  const user = users.find(u => u.id === parseInt(req.params.id));
  if (!user) return res.status(404).send('User not found');
  res.json(user);
});

// UPDATE a user by ID
app.put('/users/:id', (req, res) => {
  const user = users.find(u => u.id === parseInt(req.params.id));
  if (!user) return res.status(404).send('User not found');
  
  user.name = req.body.name;
  res.json(user);
});

// DELETE a user by ID
app.delete('/users/:id', (req, res) => {
  const userIndex = users.findIndex(u => u.id === parseInt(req.params.id));
  if (userIndex === -1) return res.status(404).send('User not found');
  
  const deletedUser = users.splice(userIndex, 1);
  res.json(deletedUser);
});

// Start the server
app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

* API Versioning :
As your API evolves, you may need to introduce changes that are not backward-compatible. API versioning helps you manage these changes by providing multiple versions of your API.

There are several strategies for API versioning, including :
A. URI Versioning: Include the version number in the URI.
Example: /v1/users, /v2/users

B. Query Parameter Versioning: Pass the version number as a query parameter.
Example: /users?version=1, /users?version=2

C. Header Versioning: Specify the version number in the request header.
Example: Accept: application/vnd.yourapp.v1+json

Example>
// Version 1 of the API
app.get('/v1/users', (req, res) => {
  res.json({ version: 'v1', users });
});

// Version 2 of the API with an additional field
app.get('/v2/users', (req, res) => {
  const usersV2 = users.map(user => ({ ...user, email: 'user@example.com' }));
  res.json({ version: 'v2', users: usersV2 });
});


9. Database Integration :
Integrating a database with an Express.js application is essential for managing data in a web application. This involves connecting to a database, performing CRUD (Create, Read, Update, Delete) operations, and using ORMs (Object-Relational Mappers) to simplify database interactions.

Express.js can be connected to various types of databases, including NoSQL databases like MongoDB and SQL databases like MySQL and PostgreSQL. Each type of database requires a different approach and tools for integration.

* Connect to MySQL (with Sequelize) :
MySQL is a widely used SQL database. Sequelize is a promise-based ORM for Node.js that supports various SQL dialects, including MySQL, PostgreSQL, and SQLite.

npm install sequelize mysql2

Example>
const { Sequelize } = require('sequelize');

const sequelize = new Sequelize('mydatabase', 'username', 'password', {
  host: 'localhost',
  dialect: 'mysql'
});

sequelize.authenticate()
  .then(() => {
    console.log('Connection to MySQL has been established successfully.');
  })
  .catch(err => {
    console.error('Unable to connect to the database:', err);
  });

Here, 'mydatabase' is the name of your database, and 'username' and 'password' are your MySQL credentials.

* Express & MongoDB :
* Use create when you want to quickly create and save a document without additional processing.
Example>
// Simple user creation and saving
const newUser = await User.create({ name: "Jane Doe", email: "jane@example.com" });

Use save when you need to do more with the document before saving it, such as modifying fields or running custom logic.
Example> 
// Create a user and set additional fields before saving
const newUser = new User({ name: "Jane Doe", email: "jane@example.com" });
newUser.username = "janedoe"; // Add or modify fields
await newUser.save();

* MongoDB Update :
* new: true:
By default, when you update a document in MongoDB, the method returns the original document before the update was applied. Setting { new: true } changes this behavior, so the method returns the updated document instead.

* runValidators: true:
Mongoose allows you to define validation rules in your schemas. However, by default, these validations are only applied when creating a new document, not when updating an existing one.
Setting { runValidators: true } ensures that the update operation respects the validation rules defined in your schema. This means that if the update violates any of the validation rules, the operation will fail, preventing invalid data from being saved to the database.

* CRUD Operations with MongoDB :
CRUD operations are the foundation of interacting with a database. They allow you to Create, Read, Update, and Delete records in your database.

* In one file Example, server.js>
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const Book = require('./models/Book'); // Import the Book model

// Initialize the app
const app = express();

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/expresscrud')
.then(() => console.log('MongoDB connected...'))
.catch(err => console.log(err));

// Middleware
app.use(bodyParser.json());

// Create a new book (CREATE)
app.post('/api/books', async (req, res) => {
    try {
        const book = new Book(req.body);
        await book.save();
        res.status(201).json(book);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// Get all books (READ)
app.get('/api/books', async (req, res) => {
    try {
        const books = await Book.find();
        res.json(books);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Get a book by ID (READ)
app.get('/api/books/:id', async (req, res) => {
    try {
        const book = await Book.findById(req.params.id);
        if (!book) {
            return res.status(404).json({ message: 'Book not found' });
        }
        res.json(book);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Update a book by ID (UPDATE)
app.put('/api/books/:id', async (req, res) => {
    try {
        const book = await Book.findByIdAndUpdate(req.params.id, req.body, 
        { new: true, runValidators: true });
        if (!book) {
            return res.status(404).json({ message: 'Book not found' });
        }
        res.json(book);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// Delete a book by ID (DELETE)
app.delete('/api/books/:id', async (req, res) => {
    try {
        const book = await Book.findByIdAndDelete(req.params.id);
        if (!book) {
            return res.status(404).json({ message: 'Book not found' });
        }
        res.json({ message: 'Book deleted' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

* In Oraganize way like Practical App :
Project Structure :
express-mongo-crud
├── config
│   └── db.js
├── controllers
│   └── bookController.js
├── models
│   └── Book.js
├── routes
│   └── bookRoutes.js
├── middlewares
│   └── errorHandler.js
├── server.js
├── package.json
└── .env

* Step 1: Set Up the Project :
Initialize the project as before:
mkdir express-mongo-crud
cd express-mongo-crud
npm init -y

Install the required packages:
npm install express mongoose body-parser dotenv

* Step 2: Configure the Database Connection :
Create a config directory and add a db.js file inside it:
// config/db.js
const mongoose = require('mongoose');

const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI);
        console.log('MongoDB connected...');
    } catch (err) {
        console.error(err.message);
        process.exit(1); // Exit process with failure
    }
};

module.exports = connectDB;

* Step 3: Define the Book Model :
Create a models directory and add a Book.js file inside it:
// models/Book.js
const mongoose = require('mongoose');

const BookSchema = new mongoose.Schema({
    title: {
        type: String,
        required: true
    },
    author: {
        type: String,
        required: true
    },
    pages: {
        type: Number,
        required: true
    },
    published: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model('Book', BookSchema);

* Step 4: Create the Book Controller :
Create a controllers directory and add a bookController.js file inside it:
// controllers/bookController.js
const Book = require('../models/Book');

exports.createBook = async (req, res) => {
    try {
        const book = new Book(req.body);
        await book.save();
        res.status(201).json(book);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
};

exports.getBooks = async (req, res) => {
    try {
        const books = await Book.find();
        res.json(books);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.getBookById = async (req, res) => {
    try {
        const book = await Book.findById(req.params.id);
        if (!book) {
            return res.status(404).json({ message: 'Book not found' });
        }
        res.json(book);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.updateBook = async (req, res) => {
    try {
        const book = await Book.findByIdAndUpdate(req.params.id, req.body, {
            new: true,
            runValidators: true
        });
        if (!book) {
            return res.status(404).json({ message: 'Book not found' });
        }
        res.json(book);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
};

exports.deleteBook = async (req, res) => {
    try {
        const book = await Book.findByIdAndDelete(req.params.id);
        if (!book) {
            return res.status(404).json({ message: 'Book not found' });
        }
        res.json({ message: 'Book deleted' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

* Step 5: Define the Routes :
Create a routes directory and add a bookRoutes.js file inside it:
// routes/bookRoutes.js
const express = require('express');
const { createBook, getBooks, getBookById, updateBook, deleteBook } = require('../controllers/bookController');

const router = express.Router();

// Define the routes and map them to controller methods
router.post('/books', createBook);
router.get('/books', getBooks);
router.get('/books/:id', getBookById);
router.put('/books/:id', updateBook);
router.delete('/books/:id', deleteBook);

module.exports = router;

* Step 6: Create Error Handling Middleware :
// middlewares/errorHandler.js
const errorHandler = (err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ message: 'Something went wrong!' });
};

module.exports = errorHandler;
This middleware can be used to handle errors globally across the application.

* Step 7: Set Up the Server :
Finally, modify server.js to tie everything together:
// server.js
const express = require('express');
const dotenv = require('dotenv');
const connectDB = require('./config/db');
const bookRoutes = require('./routes/bookRoutes');
const errorHandler = require('./middlewares/errorHandler');

// Load environment variables
dotenv.config();

// Initialize the app
const app = express();

// Connect to the database
connectDB();

// Middleware to parse JSON
app.use(express.json());

// Book routes
app.use('/api', bookRoutes);

// Error handling middleware
app.use(errorHandler);

// Basic route
app.get('/', (req, res) => {
    res.send('Welcome to the Express MongoDB CRUD API!');
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

* Step 8: Create Environment Variables :
Create a .env file in the root of your project to store your environment variables:
MONGO_URI=mongodb://localhost:27017/expresscrud

* Step 9: Test Your API :
Use tools like Postman to test the API:
Create a Book: POST /api/books
Get All Books: GET /api/books
Get a Book by ID: GET /api/books/:id
Update a Book: PUT /api/books/:id
Delete a Book: DELETE /api/books/:id


                ** End **

                