** SQL Topics :

1. SQL Intro
2. SELECT, DISTINCT, WHERE, ORDER BY, AND, OR, NOT
3. INSERT INTO, NULL, UPDATE, DELETE & SELECT TOP
4. Aggregate Functions
5. Wildcards
6. IN, BETWEEN & Aliases
7. Joins
8. UNION, GROUP BY, HAVING, EXISTS, ANY & ALL
9.  SELECT INTO, INSERT INTO SELECT, CASE Expression, NULL Functions
10. Stored Procedure, Comments, SQL Operators


                                ** SQL DATABASE **
11. CREATE DATABASE
12. SQL Constraints
13. INDEX, AUTO INCREMENT, DATE, VIEW 
14. SQL Injection
15. SQL Hosting, Data Types &  MySQL Functions


1. SQL Intro :
SQL stands for Structured Query Language
SQL lets you access and manipulate databases
SQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987.

Note: Most of the SQL database programs also have their own proprietary extensions in addition to the SQL standard!

* RDBMS :
RDBMS stands for Relational Database Management System.
RDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.
The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.

* SQL Statements :
Most of the actions you need to perform on a database are done with SQL statements.
SQL statements consists of keywords that are easy to understand.
The following SQL statement returns all records from a table named "Customers":
Query> SELECT * FROM customers;

* Database Tables :
A database most often contains one or more tables. Each table is identified by a name (e.g. "Customers" or "Orders"), and contain records (rows) with data.

* Note :
SQL keywords are NOT case sensitive: select is the same as SELECT.
but we prefer use SQL keywords in all capital letters & User Database related keywords in all small letters.
Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.

* Some of The Most Important SQL Commands :
SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index


2. SELECT, DISTINCT, WHERE, ORDER BY, AND, OR, NOT :

A. SELECT :
The SELECT statement is used to select data from a database.
Syntax> SELECT column1, column2, ... FROM table_name;
Query> SELECT name, city FROM customers;
If you want to return all columns, without specifying every column name, you can use the SELECT * syntax:
SELECT * FROM Customers;

B. DISTINCT :
The SELECT DISTINCT statement is used to return only distinct (different) values.
It does not returns duplicate values.
Syntax> SELECT DISTINCT column1, column2, ... FROM table_name;
Query> SELECT DISTINCT country FROM customers;

C. WHERE :
The WHERE clause is used to filter records.
It is used to extract only those records that fulfill a specified condition.
You can use other operators than the = operator to filter the search.
Syntax> SELECT column1, column2, ... FROM table_name WHERE condition;
Query> SELECT * FROM customers WHERE country = 'Mexico';

Note :
SQL requires single quotes around text values (most database systems will also allow double quotes).
However, numeric fields should not be enclosed in quotes:
Query> SELECT * FROM customers WHERE customerID = 1;

D. ORDER BY :
The ORDER BY keyword is used to sort the result-set in ascending or descending order.
Syntax> SELECT column1, column2, ... FROM table_name 
        ORDER BY column1, column2, ... ASC|DESC;

Query> SELECT * FROM products ORDER BY price; // ASC Default.
Query> SELECT * FROM products ORDER BY price DESC;
For string values the ORDER BY keyword will order alphabetically.

Example> The following SQL statement selects all customers from the "Customers" table, sorted by the "Country" and the "CustomerName" column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:
Query> SELECT * FROM customers ORDER BY country, customerName;

Example> The following SQL statement selects all customers from the "Customers" table, sorted ascending by the "Country" and descending by the "CustomerName" column:
Query> SELECT * FROM customers ORDER BY country ASC, customerName DESC;

D. AND :
The WHERE clause can contain one or many AND operators.
The AND operator is used to filter records based on more than one condition.
Syntax> SELECT column1, column2, ... FROM table_name
        WHERE condition1 AND condition2 AND condition3 ...;
Query> SELECT * FROM customers WHERE country = 'Germany' AND city = 'Berlin';
Note :
The AND operator displays a record if all the conditions are TRUE.
The OR operator displays a record if any of the conditions are TRUE.

E. OR :
The WHERE clause can contain one or more OR operators.
The OR operator is used to filter records based on more than one condition.
Syntax> SELECT column1, column2, ... FROM table_name
        WHERE condition1 OR condition2 OR condition3 ...;
Query> SELECT * FROM customers WHERE country = 'Germany' OR city = 'Berlin';

F. NOT :
The NOT operator is used in combination with other operators to give the opposite result, also called the negative result.
Syntax> SELECT column1, column2, ... FROM table_name WHERE NOT condition;
Query> SELECT * FROM customers WHERE NOT country = 'Spain';


3. INSERT INTO, NULL, UPDATE, DELETE & SELECT TOP :

A. INSERT INTO :
The INSERT INTO statement is used to insert new records in a table.
It is possible to write the INSERT INTO statement in two ways:

A1. Specify both the column names and the values to be inserted:
Syntax> INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

A2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows:
Syntax> INSERT INTO table_name VALUES (value1, value2, value3, ...);

Query> INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway');

It is also possible to insert multiple rows in one statement :
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES
('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'),
('Greasy Burger', 'Per Olsen', 'Gateveien 15', 'Sandnes', '4306', 'Norway'),
('Tasty Tee', 'Finn Egan', 'Streetroad 19B', 'Liverpool', 'L1 0AA', 'UK');

B. NULL :
A field with a NULL value is a field with no value.
If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.

Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!

It is not possible to test for NULL values with comparison operators, 
such as =, <, or <>.
We will have to use the IS NULL and IS NOT NULL operators instead.
Syntax> SELECT column_names FROM table_name
        WHERE column_name IS NULL / IS NOT NULL;
Query> SELECT CustomerName, ContactName, Address FROM Customers WHERE Address IS NULL;

C. UPDATE :
The UPDATE statement is used to modify the existing records in a table.
Syntax> UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;

Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!

Query> UPDATE customers SET name = 'Alfred', City= 'Delhi' WHERE customerID = 1;

D. DELETE :
The DELETE statement is used to delete existing records in a table.
Syntax> DELETE FROM table_name WHERE condition;

Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!

Query> DELETE FROM customers WHERE customerName='Alfreds';

* E. SQL TOP, LIMIT, FETCH FIRST or ROWNUM Clause :
The SELECT TOP clause is used to specify the number of records to return.
The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.
Query> SELECT TOP 3 * FROM Customers;

* Note: Not all database systems support the SELECT TOP clause. MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses FETCH FIRST n ROWS ONLY and ROWNUM.

* SQL Server / MS Access Syntax:
SELECT TOP number|percent column_name(s) FROM table_name WHERE condition;
Query> SELECT TOP 50 PERCENT * FROM Customers;

* MySQL Syntax:
SELECT column_name(s) FROM table_name WHERE condition LIMIT number;
Query> SELECT * FROM Customers LIMIT 3;

* Oracle 12 Syntax:
SELECT column_name(s) FROM table_name ORDER BY column_name(s) 
FETCH FIRST number ROWS ONLY;
Query> SELECT * FROM Customers FETCH FIRST 3 ROWS ONLY;


4. Aggregate Functions :
An aggregate function is a function that performs a calculation on a set of values, and returns a single value.

Aggregate functions are often used with the GROUP BY clause of the SELECT statement. The GROUP BY clause splits the result-set into groups of values and the aggregate function can be used to return a single value for each group.

The most commonly used SQL aggregate functions are:
MIN(), MAX(), COUNT(), SUM(), AVG()

Aggregate functions ignore null values (except for COUNT()).

A. MIN() :
The MIN() function returns the smallest value of the selected column.
Query> SELECT MIN(Price) FROM Products;
Query> SELECT MIN(column_name) FROM table_name WHERE condition;

* When you use MIN() or MAX(), the returned column will not have a descriptive name. To give the column a descriptive name, use the AS keyword:
Query> SELECT MIN(Price) AS SmallestPrice FROM Products;

* Here we use the MIN() function and the GROUP BY clause, to return the smallest price for each category in the Products table:
Query> SELECT MIN(Price) AS SmallestPrice, CategoryID FROM Products
GROUP BY CategoryID;

B. MAX() :
The MAX() function returns the largest value of the selected column.
Query> SELECT MAX(Price) FROM Products;
Syntax> SELECT MAX(column_name) FROM table_name WHERE condition;

C. COUNT() :
The COUNT() function returns the number of rows that matches a specified criterion.
Query> SELECT COUNT(*) FROM Products;
Syntax> SELECT COUNT(column_name) FROM table_name WHERE condition;

You can specify a column name instead of the asterix symbol (*).
If you specify a column name instead of (*), NULL values will not be counted.
Query> SELECT COUNT(ProductName) FROM Products;

D. SUM() :
The SUM() function returns the total sum of a numeric column.
Query> SELECT SUM(Quantity) FROM OrderDetails;
Syntax> SELECT SUM(column_name) FROM table_name WHERE condition;

E. AVG() :
The AVG() function returns the average value of a numeric column.
Query> SELECT AVG(Price) FROM Products;
Note: NULL values are ignored.
Syntax> SELECT AVG(column_name) FROM table_name WHERE condition;


5. Wildcards :
A wildcard character is used to substitute one or more characters in a string.

Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

There are two wildcards often used in conjunction with the LIKE operator:
 The percent sign % represents zero, one, or multiple characters
 The underscore sign _ represents one, single character
 Example> Select all customers that starts with the letter "a":
Query> SELECT * FROM Customers WHERE CustomerName LIKE 'a%';
Syntax> SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern;

Example> Return all customers that starts with "b" and ends with "s":
Query> SELECT * FROM Customers WHERE CustomerName LIKE 'b%s';

Example> Return all customers that contains the phrase 'or'
Query> SELECT * FROM Customers WHERE CustomerName LIKE '%or%';

Example> Return all customers that starts with "a" and are at least 3 characters in length:
Query> SELECT * FROM Customers WHERE CustomerName LIKE 'a__%';

Example> Return all customers that have "r" in the second position:
Query> SELECT * FROM Customers WHERE CustomerName LIKE '_r%';

Example> Return all customers from Spain:
Query> SELECT * FROM Customers WHERE Country LIKE 'Spain';


6. IN, BETWEEN & Aliases :

A. IN :
The IN operator allows you to specify multiple values in a WHERE clause.
The IN operator is a shorthand for multiple OR conditions.
Query> SELECT * FROM Customers WHERE Country IN ('Germany', 'France', 'UK');
Syntax> SELECT column_name(s) FROM table_name 
WHERE column_name IN (value1, value2, ...);

B. NOT IN :
By using the NOT keyword in front of the IN operator, you return all records that are NOT any of the values in the list.

C. IN (SELECT) :
You can also use IN with a subquery in the WHERE clause.
With a subquery you can return all records from the main query that are present in the result of the subquery.
Query> SELECT * FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders);

D. BETWEEN :
The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
The BETWEEN operator is inclusive: begin and end values are included. 
Query> SELECT * FROM Products WHERE Price BETWEEN 10 AND 20;
Syntax> SELECT column_name(s) FROM table_name
WHERE column_name BETWEEN value1 AND value2;

E. NOT BETWEEN :
opposite of BETWEEN.

F. Aliases
SQL aliases are used to give a table, or a column in a table, a temporary name.
Aliases are often used to make column names more readable.
An alias only exists for the duration of that query.
An alias is created with the AS keyword.
Query> SELECT CustomerID AS ID FROM Customers;
Syntax> SELECT column_name AS alias_name FROM table_name;


7. Joins :
A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

* Types of SQL JOINs :
(INNER) JOIN: Returns records that have matching values in both tables
LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table.

A. INNER JOIN :
The INNER JOIN keyword selects records that have matching values in both tables.
Syntax> SELECT column_name(s) FROM table1 INNER JOIN table2
ON table1.column_name = table2.column_name;

Query> SELECT Products.ProductID, Products.ProductName, Categories.CategoryName
FROM Products
INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID;

Note: The INNER JOIN keyword returns only rows with a match in both tables. Which means that if you have a product with no CategoryID, or with a CategoryID that is not present in the Categories table, that record would not be returned in the result.

Note :
JOIN and INNER JOIN will return the same result.
INNER is the default join type for JOIN, so when you write JOIN the parser actually writes INNER JOIN.

B. LEFT JOIN :
The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match.

Syntax> SELECT column_name(s) FROM table1 LEFT JOIN table2
ON table1.column_name = table2.column_name;

Note: In some databases LEFT JOIN is called LEFT OUTER JOIN.

Query> SELECT Customers.CustomerName, Orders.OrderID FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;

C. RIGHT JOIN :
The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). The result is 0 records from the left side, if there is no match.

Syntax> SELECT column_name(s) FROM table1 RIGHT JOIN table2
ON table1.column_name = table2.column_name;

Note: In some databases RIGHT JOIN is called RIGHT OUTER JOIN.

Query> SELECT Orders.OrderID, Employees.LastName, Employees.FirstName FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;

D. FULL OUTER JOIN :
The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.
Tip: FULL OUTER JOIN and FULL JOIN are the same.

Syntax> SELECT column_name(s) FROM table1 FULL OUTER JOIN table2
ON table1.column_name = table2.column_name WHERE condition;

Query> SELECT Customers.CustomerName, Orders.OrderID FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;

E. Self Join :
A self join is a regular join, but the table is joined with itself.
Syntax> SELECT column_name(s) FROM table1 T1, table1 T2 WHERE condition;
Query> SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customers A, Customers B
WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City
ORDER BY A.City;


8. UNION, GROUP BY, HAVING, EXISTS, ANY & ALL :

A. UNION :
The UNION operator is used to combine the result-set of two or more SELECT statements.

Every SELECT statement within UNION must have the same number of columns
The columns must also have similar data types
The columns in every SELECT statement must also be in the same order

Syntax> SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;

The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL.

Query> SELECT City FROM Customers
UNION
SELECT City FROM Suppliers
ORDER BY City;

B. GROUP BY :
The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".

The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.

Syntax> SELECT column_name(s) FROM table_name WHERE condition
GROUP BY column_name(s) ORDER BY column_name(s);

Query> SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country;

C. HAVING :
The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.

Syntax> SELECT column_name(s) FROM table_name WHERE condition
GROUP BY column_name(s) HAVING condition
ORDER BY column_name(s);

Query> SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5;

D. EXISTS :
The EXISTS operator is used to test for the existence of any record in a subquery.
The EXISTS operator returns TRUE if the subquery returns one or more records.
Syntax> SELECT column_name(s) FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);

Query> SELECT SupplierName FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);

E. ANY and ALL :
The ANY and ALL operators allow you to perform a comparison between a single column value and a range of other values.

* ANY :
The ANY operator:
returns a boolean value as a result
returns TRUE if ANY of the subquery values meet the condition
ANY means that the condition will be true if the operation is true for any of the values in the range.

Syntax> SELECT column_name(s) FROM table_name
WHERE column_name operator ANY / ALL
  (SELECT column_name
  FROM table_name
  WHERE condition);

Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).

Query> SELECT ProductName FROM Products WHERE ProductID = ANY
  (SELECT ProductID
  FROM OrderDetails
  WHERE Quantity = 10);

* ALL :
The ALL operator:
returns a boolean value as a result
returns TRUE if ALL of the subquery values meet the condition
is used with SELECT, WHERE and HAVING statements
ALL means that the condition will be true only if the operation is true for all values in the range. 

Syntax> SELECT ALL column_name(s) FROM table_name WHERE condition;

Query> SELECT ALL ProductName FROM Products WHERE TRUE;


9. SELECT INTO, INSERT INTO SELECT, CASE Expression, NULL Functions :

A. SELECT INTO :
The SELECT INTO statement copies data from one table into a new table.
Syntax> SELECT * / column1, column2... INTO newtable [IN externaldb] FROM oldtable 
WHERE condition;

Query> SELECT * INTO CustomersBackup2017 FROM Customers;

Tip: SELECT INTO can also be used to create a new, empty table using the schema of another. Just add a WHERE clause that causes the query to return no data:
Query> SELECT * INTO newtable FROM oldtable WHERE 1 = 0;

B. INSERT INTO SELECT :
The INSERT INTO SELECT statement copies data from one table and inserts it into another table.
The INSERT INTO SELECT statement requires that the data types in source and target tables match.
Note: The existing records in the target table are unaffected.

Syntax> INSERT INTO table2 SELECT * FROM table1 WHERE condition;

Syntax2> INSERT INTO table2 (column1, column2, column3, ...)
SELECT column1, column2, column3, ... FROM table1 WHERE condition;

C. CASE Expression :
The CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.
If there is no ELSE part and no conditions are true, it returns NULL.

Syntax> 
CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;

Query> SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;

Query> SELECT CustomerName, City, Country
FROM Customers
ORDER BY
(CASE
    WHEN City IS NULL THEN Country
    ELSE City
END);

D. NULL Functions :
Suppose that the "UnitsOnOrder" column is optional, and may contain NULL values.
if any of the "UnitsOnOrder" values are NULL, the result will be NULL.
Query> SELECT ProductName, UnitPrice * (UnitsInStock + UnitsOnOrder) FROM Products;
if any of the "UnitsOnOrder" values are NULL, the result will be NULL.

Solutions :
MySQL :
The MySQL IFNULL() function lets you return an alternative value if an expression is NULL.
Query> SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))
FROM Products;
or we can use the COALESCE() function.

SQL Server :
The SQL Server ISNULL() function lets you return an alternative value when an expression is NULL. or we can use the COALESCE() function.

MS Access :
The MS Access IsNull() function returns TRUE (-1) if the expression is a null value, otherwise FALSE (0).

Oracle :
The Oracle NVL() function achieves the same result. 
or we can use the COALESCE() function.


10. Stored Procedure, Comments, SQL Operators :

A. Stored Procedure :
A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.

So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.

You can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed.

Syntax> CREATE PROCEDURE procedure_name
AS
sql_statement
GO;

Execute a Stored Procedure :
EXEC procedure_name;

Example> CREATE PROCEDURE SelectAllCustomers @City nvarchar(30)
AS
SELECT * FROM Customers WHERE City = @City
GO;

EXEC SelectAllCustomers @City = 'London';

B. Comments :
Comments are used to explain sections of SQL statements, or to prevent execution of SQL statements.

Note: Comments are not supported in Microsoft Access databases!

* Single line comments start with --.
Any text between -- and the end of the line will be ignored (will not be executed).
Example> -- Select all:
Example> SELECT * FROM Customers -- WHERE City='Berlin';

* Multi-line comments start with /* and end with */.
Any text between /* and */ will be ignored.
Example> /*Select all the columns
of all the records
in the Customers table:*/
SELECT * FROM Customers;

Example> SELECT CustomerName, /*City,*/ Country FROM Customers;

C. SQL Operators :

* SQL Arithmetic Operators :
Operator	Description
+	        Add	
-	        Subtract	
*	        Multiply	
/	        Divide	
%	        Modulo

* SQL Bitwise Operators :
Operator	Description
&	        Bitwise AND
|	        Bitwise OR
^	        Bitwise exclusive OR

* SQL Comparison Operators :
Operator	Description
=	        Equal to	
>	        Greater than	
<	        Less than	
>=	        Greater than or equal to	
<=	        Less than or equal to	
<>	        Not equal to

* SQL Compound Operators :
Operator	Description
+=	        Add equals
-=	        Subtract equals
*=	        Multiply equals
/=	        Divide equals
%=	        Modulo equals
&=	        Bitwise AND equals
^-=	        Bitwise exclusive equals
|*=	        Bitwise OR equals

* SQL Logical Operators :
Operator	Description
ALL	        TRUE if all of the subquery values meet the condition	
AND	        TRUE if all the conditions separated by AND is TRUE	
ANY	        TRUE if any of the subquery values meet the condition	
BETWEEN	        TRUE if the operand is within the range of comparisons	
EXISTS	        TRUE if the subquery returns one or more records	
IN	        TRUE if the operand is equal to one of a list of expressions	
LIKE	        TRUE if the operand matches a pattern	
NOT	        Displays a record if the condition(s) is NOT TRUE	
OR	        TRUE if any of the conditions separated by OR is TRUE	
SOME	        TRUE if any of the subquery values meet the condition


                ** SQL DATABASE **

11. CREATE DATABASE, BACKUP DATABASE, CREATE TABLE, DROP TABLE, ALTER TABLE :

A. CREATE DATABASE :
The CREATE DATABASE statement is used to create a new SQL database.
Syntax> CREATE DATABASE databasename;
Query> CREATE DATABASE testDB;

Tip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;

The DROP DATABASE statement is used to drop an existing SQL database.
Syntax> DROP DATABASE databasename;
Query> DROP DATABASE testDB;

Note: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database!

B. BACKUP DATABASE :
The BACKUP DATABASE statement is used in SQL Server to create a full back up of an existing SQL database.
Syntax> BACKUP DATABASE databasename TO DISK = 'filepath';

* A differential back up only backs up the parts of the database that have changed since the last full database backup.
Syntax> BACKUP DATABASE databasename TO DISK = 'filepath' WITH DIFFERENTIAL;

Query> BACKUP DATABASE testDB TO DISK = 'D:\backups\testDB.bak' WITH DIFFERENTIAL;

C. CREATE TABLE :
The CREATE TABLE statement is used to create a new table in a database.
Syntax>
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);

Query>
CREATE TABLE Persons (
    PersonID int,
    LastName varchar(255),
    FirstName varchar(255),
    Address varchar(255),
    City varchar(255)
);

The column parameters specify the names of the columns of the table.
The datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, etc.).

* Create Table Using Another Table :
CREATE TABLE new_table_name AS
    SELECT column1, column2,...
    FROM existing_table_name
    WHERE ....;

D. DROP TABLE :
The DROP TABLE statement is used to drop an existing table in a database.
Syntax> DROP TABLE table_name;
Query> DROP TABLE Shippers;

* The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.
Syntax> TRUNCATE TABLE table_name;

E. ALTER TABLE :
The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
The ALTER TABLE statement is also used to add and drop various constraints on an existing table.

* ALTER TABLE - ADD Column :
Syntax> ALTER TABLE table_name ADD column_name datatype;
Query> ALTER TABLE Customers ADD Email varchar(255);

* ALTER TABLE - DROP COLUMN :
Syntax> ALTER TABLE table_name DROP COLUMN column_name;
Query> ALTER TABLE Customers DROP COLUMN Email;

* ALTER TABLE - RENAME COLUMN :
Syntax> ALTER TABLE table_name RENAME COLUMN old_name to new_name;

SQL Server Syntax :
EXEC sp_rename 'table_name.old_name',  'new_name', 'COLUMN';

* ALTER TABLE - ALTER/MODIFY DATATYPE :
SQL Server / MS Access:
Query> ALTER TABLE table_name ALTER COLUMN column_name datatype;

My SQL / Oracle (prior version 10G):
Query>  ALTER TABLE table_name MODIFY COLUMN column_name datatype;

Oracle 10G and later:
Query> ALTER TABLE table_name MODIFY column_name datatype;


12. SQL Constraints :
SQL constraints are used to specify rules for data in a table.
Constraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement.

Syntax>
CREATE TABLE table_name (
    column1 datatype constraint,
    column2 datatype constraint,
    column3 datatype constraint,
    ....
);

Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.
Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.

The following constraints are commonly used in SQL:
NOT NULL - Ensures that a column cannot have a NULL value
UNIQUE - Ensures that all values in a column are different
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
FOREIGN KEY - Prevents actions that would destroy links between tables
CHECK - Ensures that the values in a column satisfies a specific condition
DEFAULT - Sets a default value for a column if no value is specified
CREATE INDEX - Used to create and retrieve data from the database very quickly.

A. NOT NULL :
By default, a column can hold NULL values.
The NOT NULL constraint enforces a column to NOT accept NULL values.
This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.
Query>
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255) NOT NULL,
    Age int
);

B. UNIQUE :
The UNIQUE constraint ensures that all values in a column are different.
Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.
A PRIMARY KEY constraint automatically has a UNIQUE constraint.
However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.

SQL Server / Oracle / MS Access:
CREATE TABLE Persons (
    ID int NOT NULL UNIQUE,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);

MySQL:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    UNIQUE (ID)
);

* To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:

MySQL / SQL Server / Oracle / MS Access:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
);

C. PRIMARY KEY :
The PRIMARY KEY constraint uniquely identifies each record in a table.
Primary keys must contain UNIQUE values, and cannot contain NULL values.
A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).

MySQL:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

SQL Server / Oracle / MS Access:
CREATE TABLE Persons (
    ID int NOT NULL PRIMARY KEY,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);

* To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:

MySQL / SQL Server / Oracle / MS Access:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
);
Note: In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).

* PRIMARY KEY on ALTER TABLE :
ALTER TABLE Persons
ADD PRIMARY KEY (ID);

* DROP a PRIMARY KEY Constraint :
MySQL:
ALTER TABLE Persons
DROP PRIMARY KEY;

SQL Server / Oracle / MS Access:
ALTER TABLE Persons
DROP CONSTRAINT PK_Person;

D. FOREIGN KEY :
The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.

A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.

The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.

Persons Table :
PersonID	LastName	FirstName	Age
1	        Hansen	    Ola	        30
2	        Svendson	Tove	    23
3	        Pettersen	Kari	    20

Orders Table :
OrderID	    OrderNumber	    PersonID
1	        77895	            3
2	        44678	            3
3	        22456	            2
4	        24562	            1

Notice that the "PersonID" column in the "Orders" table points to the "PersonID" column in the "Persons" table.
The "PersonID" column in the "Persons" table is the PRIMARY KEY in the "Persons" table.
The "PersonID" column in the "Orders" table is a FOREIGN KEY in the "Orders" table.
The FOREIGN KEY constraint prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table.

* FOREIGN KEY on CREATE TABLE :

MySQL:
CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);

SQL Server / Oracle / MS Access:
CREATE TABLE Orders (
    OrderID int NOT NULL PRIMARY KEY,
    OrderNumber int NOT NULL,
    PersonID int FOREIGN KEY REFERENCES Persons(PersonID)
);

* To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:

MySQL / SQL Server / Oracle / MS Access:
CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)
    REFERENCES Persons(PersonID)
);

* SQL FOREIGN KEY on ALTER TABLE :
ALTER TABLE Orders
ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns :
ALTER TABLE Orders
ADD CONSTRAINT FK_PersonOrder
FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

* DROP a FOREIGN KEY :

MySQL:
ALTER TABLE Orders
DROP FOREIGN KEY FK_PersonOrder;

SQL Server / Oracle / MS Access:
ALTER TABLE Orders
DROP CONSTRAINT FK_PersonOrder;

E. CHECK :
The CHECK constraint is used to limit the value range that can be placed in a column.
If you define a CHECK constraint on a column it will allow only certain values for this column.
If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.

MySQL:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);

SQL Server / Oracle / MS Access:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int CHECK (Age>=18)
);

* To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns :
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
);

* CHECK on ALTER TABLE :
ALTER TABLE Persons
ADD CHECK (Age>=18);

ALTER TABLE Persons
ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');

* DROP a CHECK Constraint :

SQL Server / Oracle / MS Access:
ALTER TABLE Persons
DROP CONSTRAINT CHK_PersonAge;

MySQL:
ALTER TABLE Persons
DROP CHECK CHK_PersonAge;

F. DEFAULT :
The DEFAULT constraint is used to set a default value for a column.
The default value will be added to all new records, if no other value is specified.
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);

* The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():
CREATE TABLE Orders (
    ID int NOT NULL,
    OrderNumber int NOT NULL,
    OrderDate date DEFAULT GETDATE()
);


13. INDEX, AUTO INCREMENT, DATE, VIEW :

A. CREATE INDEX :
The CREATE INDEX statement is used to create indexes in tables.
Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries.

Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.

CREATE INDEX Syntax>
Creates an index on a table. Duplicate values are allowed:
CREATE INDEX index_name
ON table_name (column1, column2, ...);

CREATE UNIQUE INDEX Syntax>
CREATE UNIQUE INDEX index_name
ON table_name (column1, column2, ...);

Query> CREATE INDEX idx_lastname
ON Persons (LastName);

Query> CREATE INDEX idx_pname
ON Persons (LastName, FirstName);

* The DROP INDEX statement is used to delete an index in a table.

MS Access:
DROP INDEX index_name ON table_name;

SQL Server:
DROP INDEX table_name.index_name;

DB2/Oracle:
DROP INDEX index_name;

MySQL:
ALTER TABLE table_name
DROP INDEX index_name;

B. AUTO INCREMENT :
Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.

Often this is the primary key field that we would like to be created automatically every time a new record is inserted.

Query for MySQL>
CREATE TABLE Persons (
    Personid int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (Personid)
);

MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.
By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.

To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:
ALTER TABLE Persons AUTO_INCREMENT=100;

Note :
The MS SQL Server uses the IDENTITY keyword to perform an auto-increment feature.
Tip: To specify that the "Personid" column should start at value 10 and increment by 5, change it to IDENTITY(10,5).

The MS Access uses the AUTOINCREMENT keyword to perform an auto-increment feature.
Tip: To specify that the "Personid" column should start at value 10 and increment by 5, change the autoincrement to AUTOINCREMENT(10,5).

C. DATE Data Types :
MySQL comes with the following data types for storing a date or a date/time value in the database:

DATE - format YYYY-MM-DD
DATETIME - format: YYYY-MM-DD HH:MI:SS
TIMESTAMP - format: YYYY-MM-DD HH:MI:SS
YEAR - format YYYY or YY

Query> SELECT * FROM Orders WHERE OrderDate='2008-11-11'

Note: Two dates can easily be compared if there is no time component involved!

D. CREATE VIEW Statement :
In SQL, a view is a virtual table based on the result-set of an SQL statement.
A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.
You can add SQL statements and functions to a view and present the data as if the data were coming from one single table.
A view is created with the CREATE VIEW statement. 

Syntax>
CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;

Note: A view always shows up-to-date data! The database engine recreates the view, every time a user queries it.

Query>
CREATE VIEW [Brazil Customers] AS
SELECT CustomerName, ContactName
FROM Customers
WHERE Country = 'Brazil';

SELECT * FROM [Brazil Customers];

* Updating a View :
A view can be updated with the CREATE OR REPLACE VIEW statement.
Syntax>
CREATE OR REPLACE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;

Query>
CREATE OR REPLACE VIEW [Brazil Customers] AS
SELECT CustomerName, ContactName, City
FROM Customers
WHERE Country = 'Brazil';

* Dropping a View :
A view is deleted with the DROP VIEW statement.

Syntax> DROP VIEW view_name;

Query> DROP VIEW [Brazil Customers];


14. SQL Injection :
SQL injection is a code injection technique that might destroy your database.
SQL injection is one of the most common web hacking techniques.
SQL injection is the placement of malicious code in SQL statements, via web page input.

* SQL in Web Pages :
SQL injection usually occurs when you ask a user for input, like their username/userid, and instead of a name/id, the user gives you an SQL statement that you will unknowingly run on your database.

Look at the following example which creates a SELECT statement by adding a variable (txtUserId) to a select string. The variable is fetched from user input (getRequestString):

txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;

* SQL Injection Based on 1=1 is Always True :
Look at the example above again. The original purpose of the code was to create an SQL statement to select a user, with a given user id.

If there is nothing to prevent a user from entering "wrong" input, the user can enter some "smart" input like this:

UserId: 105 OR 1=1

Then, the SQL statement will look like this:
SELECT * FROM Users WHERE UserId = 105 OR 1=1;

The SQL above is valid and will return ALL rows from the "Users" table, since OR 1=1 is always TRUE.

Does the example above look dangerous? What if the "Users" table contains names and passwords?

The SQL statement above is much the same as this:
SELECT UserId, Name, Password FROM Users WHERE UserId = 105 or 1=1;

* SQL Injection Based on ""="" is Always True :

Here is an example of a user login on a web site:
Username: John Doe
Password: myPass

Example>
uName = getRequestString("username");
uPass = getRequestString("userpassword");
sql = 'SELECT * FROM Users WHERE Name ="' + uName + '" AND Pass ="' + uPass + '"'

Result>
SELECT * FROM Users WHERE Name ="John Doe" AND Pass ="myPass"

A hacker might get access to user names and passwords in a database by simply inserting " OR ""=" into the user name or password text box:

User Name: " or ""="
Password: " or ""="

The code at the server will create a valid SQL statement like this:
Result>
SELECT * FROM Users WHERE Name ="" or ""="" AND Pass ="" or ""=""

The SQL above is valid and will return all rows from the "Users" table, since OR ""="" is always TRUE.

* SQL Injection Based on Batched SQL Statements :
Most databases support batched SQL statement.
A batch of SQL statements is a group of two or more SQL statements, separated by semicolons.
The SQL statement below will return all rows from the "Users" table, then delete the "Suppliers" table.

Example>
SELECT * FROM Users; DROP TABLE Suppliers

Example>
txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;

And the following input:
User id: 105; DROP TABLE Suppliers

The valid SQL statement would look like this:
Result>
SELECT * FROM Users WHERE UserId = 105; DROP TABLE Suppliers;

* Use SQL Parameters for Protection :
To protect a web site from SQL injection, you can use SQL parameters.
SQL parameters are values that are added to an SQL query at execution time, in a controlled manner.

ASP.NET Razor Example>
txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = @0";
db.Execute(txtSQL,txtUserId);

Note that parameters are represented in the SQL statement by a @ marker.
The SQL engine checks each parameter to ensure that it is correct for its column and are treated literally, and not as part of the SQL to be executed.

Example>
txtNam = getRequestString("CustomerName");
txtAdd = getRequestString("Address");
txtCit = getRequestString("City");
txtSQL = "INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)";
db.Execute(txtSQL,txtNam,txtAdd,txtCit);


15. SQL Hosting, Data Types &  MySQL Functions :

A. SQL Hosting :
If you want your web site to be able to store and retrieve data from a database, your web server should have access to a database-system that uses the SQL language.

If your web server is hosted by an Internet Service Provider (ISP), you will have to look for SQL hosting plans.

The most common SQL hosting databases are MS SQL Server, Oracle, MySQL, and MS Access.

* MS SQL Server :
Microsoft's SQL Server is a popular database software for database-driven web sites with high traffic.
SQL Server is a very powerful, robust and full featured SQL database system.

* Oracle :
Oracle is also a popular database software for database-driven web sites with high traffic.
Oracle is a very powerful, robust and full featured SQL database system.

* MySQL :
MySQL is also a popular database software for web sites.
MySQL is a very powerful, robust and full featured SQL database system.
MySQL is an inexpensive alternative to the expensive Microsoft and Oracle solutions.

* MS Access :
When a web site requires only a simple database, Microsoft Access can be a solution.
MS Access is not well suited for very high-traffic, and not as powerful as MySQL, SQL Server, or Oracle.

B. SQL Data Types :
The data type of a column defines what value the column can hold: integer, character, money, date and time, binary, and so on.

Note: Data types might have different names in different database. And even if the name is the same, the size and other details may be different! Always check the documentation!

* MySQL Data Types (Version 8.0) :

Data type : Description
1. CHAR(size) :	A FIXED length string (can contain letters, numbers, and special characters). The size parameter specifies the column length in characters - can be from 0 to 255. Default is 1

2. VARCHAR(size) : A VARIABLE length string (can contain letters, numbers, and special characters). The size parameter specifies the maximum string length in characters - can be from 0 to 65535

3. BINARY(size) : Equal to CHAR(), but stores binary byte strings. The size parameter specifies the column length in bytes. Default is 1

4. VARBINARY(size) : Equal to VARCHAR(), but stores binary byte strings. The size parameter specifies the maximum column length in bytes.

5. TEXT(size) : Holds a string with a maximum length of 65,535 bytes

6. ENUM(val1, val2, val3, ...) : A string object that can have only one value, chosen from a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list, a blank value will be inserted. The values are sorted in the order you enter them.

7. BOOL	: Zero is considered as false, nonzero values are considered as true.
Note : BOOLEAN Equal to BOOL.

8. INT(size) : A medium integer. Signed range is from -2147483648 to 2147483647. Unsigned range is from 0 to 4294967295. The size parameter specifies the maximum display width (which is 255)
Note : INTEGER(size) Equal to INT(size)

9. BIGINT(size) : A large integer. Signed range is from -9223372036854775808 to 9223372036854775807. Unsigned range is from 0 to 18446744073709551615. The size parameter specifies the maximum display width (which is 255)

10. DECIMAL(size, d) : An exact fixed-point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter. The maximum number for size is 65. The maximum number for d is 30. The default value for size is 10. The default value for d is 0.
Note :  DEC(size, d) Equal to DECIMAL(size,d)

11. DATE : A date. Format: YYYY-MM-DD. The supported range is from '1000-01-01' to '9999-12-31'

12. DATETIME(fsp) : A date and time combination. Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. Adding DEFAULT and ON UPDATE in the column definition to get automatic initialization and updating to the current date and time

* MySQL Functions :
MySQL has many built-in functions.

MySQL String Functions Example :
ASCII : Returns the ASCII value for the specific character
CHAR_LENGTH : Returns the length of a string (in characters)
CONCAT : Adds two or more expressions together
CONCAT_WS : Adds two or more expressions together with a separator
TRIM : Removes leading and trailing spaces from a string
UCASE : Converts a string to upper-case
UPPER : Converts a string to upper-case

Example>
Return the ASCII value of the first character in "CustomerName":
Query> SELECT ASCII(CustomerName) AS NumCodeOfFirstChar FROM Customers;

Similarly, MySQL has many built-in functions for string, number, date and other advanced functions.


                    ** End **

