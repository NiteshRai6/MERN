CSS Advance Topics :
7. CSS Combinators, Pseudo-class & Pseudo Element
8. CSS Attribute Selectors, Counters, Units, Specificity & Maths Functions
9. CSS Features & Gradients & Shadow
10. Some CSS Properties
11. CSS Transforms, Transitions & Animations
12. Media Queries, Flexbox & Grid



7. CSS Combinators, Pseudo-class & Pseudo Element : (**imp**)

A. CSS Combinators :
A combinator is something that explains the relationship between the selectors.

* There are four different combinators in CSS:
descendant selector (space)
child selector (>)
adjacent sibling selector (+)
general sibling selector (~)

* Descendant Selector :
The descendant selector matches all elements that are descendants of a specified element.
The following example selects all <p> elements inside <div> elements: 
div p {
  background-color: yellow;
}

* Child Selector (>) :
The child selector selects all elements that are the children of a specified element.
The following example selects all <p> elements that are children of a <div> element:
div > p {
  background-color: yellow;
}

* Adjacent Sibling Selector (+) :
The adjacent sibling selector is used to select an element that is directly after another specific element.
Sibling elements must have the same parent element, and "adjacent" means "immediately following".
The following example selects the first <p> element that are placed immediately after <div> elements:
div + p {
  background-color: yellow;
}

* General Sibling Selector (~)
The general sibling selector selects all elements that are next siblings of a specified element.
The following example selects all <p> elements that are next siblings of <div> elements: 
div ~ p {
  background-color: yellow;
}

Example>
<div>
  <p>Paragraph 1 in the div.</p>
  <p>Paragraph 2 in the div.</p>
  <section>
    <!-- not Child but Descendant -->
    <p>Paragraph 3 in the div (inside a section element).</p>
  </section>
  <p>Paragraph 4 in the div.</p>
</div>

B. Pseudo-class :
A pseudo-class is used to define a special state of an element.

For example, it can be used to:

Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus
Syntax>
selector:pseudo-class {
  property: value;
}

Example>
div:hover {
  background-color: blue;
}

Example>
p {
  display: none;
  background-color: yellow;
  padding: 20px;
}

div:hover p {
  display: block;
}

The :first-child pseudo-class matches a specified element that is the first child of another element.
In the following example, the selector matches any <p> element that is the first child of any element:
p:first-child {
  color: blue;
}

In the following example, the selector matches the first <i> element in all <p> elements:
p i:first-child {
  color: blue;
}

In the following example, the selector matches all <i> elements in <p> elements that are the first child of another element:
p:first-child i {
  color: blue;
}

The :lang pseudo-class allows you to define special rules for different languages.

C. Pseudo-Element :
A CSS pseudo-element is used to style specified parts of an element.
For example, it can be used to:
Style the first letter, or line, of an element
Insert content before, or after, the content of an element.
Syntax>
selector::pseudo-element {
  property: value;
}

* The ::first-line Pseudo-element :
The ::first-line pseudo-element is used to add a special style to the first line of a text.
The following example formats the first line of the text in all <p> elements:
p::first-line {
  color: #ff0000;
  font-variant: small-caps;
}

Note: The ::first-line pseudo-element can only be applied to block-level elements.

The following properties apply to the ::first-line pseudo-element:
font properties
color properties
background properties
word-spacing
letter-spacing
text-decoration
vertical-align
text-transform
line-height
clear

Notice the double colon notation - ::first-line versus :first-line
The double colon replaced the single-colon notation for pseudo-elements in CSS3. This was an attempt from W3C to distinguish between pseudo-classes and pseudo-elements.
The single-colon syntax was used for both pseudo-classes and pseudo-elements in CSS2 and CSS1.
For backward compatibility, the single-colon syntax is acceptable for CSS2 and CSS1 pseudo-elements.

* The ::first-letter Pseudo-element :
The ::first-letter pseudo-element is used to add a special style to the first letter of a text.
The following example formats the first letter of the text in all <p> elements: 
p::first-letter {
  color: #ff0000;
  font-size: xx-large;
}
Similar properties can be applied here like as ::first-line.

* Pseudo-elements can be combined with HTML classes: 
p.intro::first-letter {
  color: #ff0000;
  font-size: 200%;
}

* Several pseudo-elements can also be combined :
p::first-letter {
  color: #ff0000;
  font-size: xx-large;
}
p::first-line {
  color: #0000ff;
  font-variant: small-caps;
}

* The ::before pseudo-element can be used to insert some content before the content of an element.
The following example inserts an image before the content of each <h1> element:
h1::before {
  content: url(smiley.gif);
}

* The ::after pseudo-element can be used to insert some content after the content of an element.
h1::after {
  content: url(smiley.gif);
}

* The ::marker pseudo-element selects the markers of list items.
::marker {
  color: red;
  font-size: 23px;
}

* The ::selection pseudo-element matches the portion of an element that is selected by a user.
The following CSS properties can be applied to ::selection: color, background, cursor, and outline.
::selection {
  color: red;
  background: yellow;
}


8. CSS Attribute Selectors, Counters, Units, Specificity & Maths Functions :

A. CSS Attribute Selectors :
* The [attribute] selector is used to select elements with a specified attribute.
The following example selects all <a> elements with a target attribute:
a[target] {
  background-color: yellow;
}

* The [attribute="value"] selector is used to select elements with a specified attribute and value.
a[target="_blank"] {
  background-color: yellow;
}

* The [attribute~="value"] selector is used to select elements with an attribute value containing a specified word.
The following example selects all elements with a title attribute that contains a space-separated list of words, one of which is "flower":
[title~="flower"] {
  border: 5px solid yellow;
}

* The [attribute|="value"] selector is used to select elements with the specified attribute, whose value can be exactly the specified value, or the specified value followed by a hyphen (-).
Note: The value has to be a whole word, either alone, like class="top", or followed by a hyphen( - ), like class="top-text".
[class|="top"] {
  background: yellow;
}

* The [attribute^="value"] selector is used to select elements with the specified attribute, whose value starts with the specified value.
The following example selects all elements with a class attribute value that starts with "top".
Note: The value does not have to be a whole word!
[class^="top"] {
  background: yellow;
}

* The [attribute$="value"] selector is used to select elements whose attribute value ends with a specified value.
The following example selects all elements with a class attribute value that ends with "test":
Note: The value does not have to be a whole word!  
[class$="test"] {
  background: yellow;
}

* The [attribute*="value"] selector is used to select elements whose attribute value contains a specified value.
The following example selects all elements with a class attribute value that contains "te":
Note: The value does not have to be a whole word!  

The attribute selectors can be useful for styling forms without class or ID.

B. CSS Counters :
CSS counters are like "variables". The variable values can be incremented by CSS rules (which will track how many times they are used).

To work with CSS counters we will use the following properties:
counter-reset - Creates or resets a counter
counter-increment - Increments a counter value
content - Inserts generated content
counter() or counters() function - Adds the value of a counter to an element

The following example creates a counter for the page (in the body selector), then increments the counter value for each <h2> element and adds "Section <value of the counter>:" to the beginning of each <h2> element:
body {
  counter-reset: section;
}
h2::before {
  counter-increment: section;
  content: "Section " counter(section) ": ";
}

C. CSS Units :
CSS has several different units for expressing a length.
Many CSS properties take "length" values, such as width, margin, padding, font-size, etc.
Length is a number followed by a length unit, such as 10px, 2em, etc.

Note: A whitespace cannot appear between the number and the unit. However, if the value is 0, the unit can be omitted.

For some CSS properties, negative lengths are allowed.
There are two types of length units: absolute and relative.

* Absolute Lengths :
The absolute length units are fixed and a length expressed in any of these will appear as exactly that size.
Absolute length units are not recommended for use on screen, because screen sizes vary so much. However, they can be used if the output medium is known, such as for print layout.

Unit : Description
cm : centimeters
mm : millimeters
in : inches (1in = 96px = 2.54cm)
px * : pixels (1px = 1/96th of 1in)
pt : points (1pt = 1/72 of 1in)
pc : picas (1pc = 12 pt)

* Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution screens 1px implies multiple device pixels.

* Relative Lengths :
Relative length units specify a length relative to another length property. Relative length units scale better between different rendering mediums.

em	Relative to the font-size of the element (2em means 2 times the size of the current font)	
ex	Relative to the x-height of the current font (rarely used)	
ch	Relative to width of the "0" (zero)	
rem	Relative to font-size of the root element	
vw	Relative to 1% of the width of the viewport*	
vh	Relative to 1% of the height of the viewport*	
vmin	Relative to 1% of viewport's* smaller dimension	
vmax	Relative to 1% of viewport's* larger dimension	
%	Relative to the parent element

Tip: The em and rem units are practical in creating perfectly scalable layout!
* Viewport = the browser window size. If the viewport is 50cm wide, 1vw = 0.5cm.

D. CSS Specificity :
If there are two or more CSS rules that point to the same element, the selector with the highest specificity value will "win", and its style declaration will be applied to that HTML element.

There are four categories which define the specificity level of a selector:
Inline styles - Example: <h1 style="color: pink;">
IDs - Example: #navbar
Classes, pseudo-classes, attribute selectors - Example: .test, :hover, [href]
Elements and pseudo-elements - Example: h1, ::before

Memorize how to calculate specificity!
Start at 0, add 100 for each ID value, add 10 for each class value (or pseudo-class or attribute selector), add 1 for each element selector or pseudo-element.
The selector with the highest specificity value will win and take effect!

Note: Inline style gets a specificity value of 1000, and is always given the highest priority!
Note 2: There is one exception to this rule: if you use the !important rule, it will even override inline styles!

E. !important? :
The !important rule in CSS is used to add more importance to a property/value than normal.
In fact, if you use the !important rule, it will override ALL previous styling rules for that specific property on that element.
Do not use it unless you absolutely have to.
p {
  background-color: red !important;
}

F. CSS Math Functions :
The CSS math functions allow mathematical expressions to be used as property values. Here, we will explain the calc(), max() and min() functions.

* The calc() function performs a calculation to be used as the property value.
calc(expression);
Example>
#div1 {
  position: absolute;
  left: 50px;
  width: calc(100% - 100px);
  border: 1px solid black;
  background-color: yellow;
  padding: 5px;
}

* The max() function uses the largest value, from a comma-separated list of values, as the property value.
max(value1, value2, ...)
Example> #div1 {
  background-color: yellow;
  height: 100px;
  width: max(50%, 300px);
}

* The min() function uses the smallest value, from a comma-separated list of values, as the property value.


9. CSS Features & Gradients & Shadow :

* Rounded Corners :
With the CSS border-radius property, you can give any element "rounded corners".
Tip: The border-radius property is actually a shorthand property for the border-top-left-radius, border-top-right-radius, border-bottom-right-radius and border-bottom-left-radius properties.
p{
  border-radius: 50%;
}

* border-image :
The CSS border-image property allows you to specify an image to be used instead of the normal border around an element.

The property has three parts:
The image to use as the border
Where to slice the image
Define whether the middle sections should be repeated or stretched
#border-img {
  border: 10px solid transparent;
  padding: 15px;
  border-image: url(border.png) 30 round;
}
Tip: The border-image property is actually a shorthand property for the border-image-source, border-image-slice, border-image-width, border-image-outset and border-image-repeat properties.

* Background & Color :
CSS allows you to add multiple background images for an element, through the background-image property.
#example1 {
  background-image: url(img_flwr.gif), url(paper.gif);
  background-position: right bottom, left top;
  background-repeat: no-repeat, repeat;
}

The two other possible values for background-size are contain and cover.
The contain keyword scales the background image to be as large as possible (but both its width and its height must fit inside the content area). As such, depending on the proportions of the background image and the background positioning area, there may be some areas of the background which are not covered by the background image.

The cover keyword scales the background image so that the content area is completely covered by the background image (both its width and height are equal to or exceed the content area). As such, some parts of the background image may not be visible in the background positioning area.

The transparent keyword is used to make a color transparent. This is often used to make a transparent background color for an element.
The transparent keyword is equivalent to rgba(0,0,0,0).

The currentcolor keyword is like a variable that holds the current value of the color property of an element.

The inherit keyword specifies that a property should inherit its value from its parent element.
The inherit keyword can be used for any CSS property, and on any HTML element.

B. CSS Gradients :
CSS gradients let you display smooth transitions between two or more specified colors.
CSS defines three types of gradients:
Linear Gradients (goes down/up/left/right/diagonally)
Radial Gradients (defined by their center)
Conic Gradients (rotated around a center point)

* Linear Gradients :
To create a linear gradient you must define at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction (or an angle) along with the gradient effect.
background-image: linear-gradient(direction, color-stop1, color-stop2, ...);
Direction - Top to Bottom (this is default)

#rainbow {
  background-image: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet);
}

* Radial Gradients :
A radial gradient is defined by its center.
To create a radial gradient you must also define at least two color stops.
background-image: radial-gradient(shape size at position, start-color, ..., last-color);
By default, shape is ellipse, size is farthest-corner, and position is center.
Radial Gradient - Evenly Spaced Color Stops (this is default)
#grad {
  background-image: radial-gradient(circle, red, yellow, green);
}

* Conic Gradients :
A conic gradient is a gradient with color transitions rotated around a center point.
To create a conic gradient you must define at least two colors.
background-image: conic-gradient([from angle] [at position,] color [degree], color [degree], ...);
By default, angle is 0deg and position is center.
If no degree is specified, the colors will be spread equally around the center point.
#grad {
  background-image: conic-gradient(red, yellow, green, blue, black);
  border-radius: 50%;
}

C. Shadow Effects :
The CSS text-shadow property applies shadow to text.
h1 {
  text-shadow: 2px 2px red;
}

The CSS box-shadow property is used to apply one or more shadows to an element.
In its simplest use, you only specify a horizontal and a vertical shadow. The default color of the shadow is the current text-color.
The color parameter defines the color of the shadow.
The blur parameter defines the blur radius. The higher the number, the more blurred the shadow will be.
The spread parameter defines the spread radius. A positive value increases the size of the shadow, a negative value decreases the size of the shadow.
The inset parameter changes the shadow from an outer shadow (outset) to an inner shadow.
You can also use the box-shadow property to create paper-like cards.
div {
  box-shadow: 10px 10px 5px 12px lightblue;
}


10. Some CSS Properties :

* Text Overflow :
The CSS text-overflow property specifies how overflowed content that is not displayed should be signaled to the user.
It can be clipped:
or it can be rendered as an ellipsis (...).
p.test1 {
  white-space: nowrap;
  width: 200px;
  border: 1px solid #000000;
  overflow: hidden;
  text-overflow: clip / ellipsis;
}

* Word Wrapping :
The CSS word-wrap property allows long words to be able to be broken and wrap onto the next line. 
p {
  word-wrap: break-word;
}

* Word Breaking :
The CSS word-break property specifies line breaking rules.
p.test1 {
  word-break: keep-all / break-all;
}

* Writing Mode :
The CSS writing-mode property specifies whether lines of text are laid out horizontally or vertically.
p.test1 {
  writing-mode: horizontal-tb / vertical-rl;
}

* @font-face Rule :
In the @font-face rule; first define a name for the font (e.g. myFirstFont) and then point to the font file.
@font-face {
  font-family: myFirstFont;
  src: url(sansation_light.woff);
}
div {
  font-family: myFirstFont;
}

* Tooltip :
A tooltip is often used to specify extra information about something when the user moves the mouse pointer over an element.

* Image Reflections :
The box-reflect property is used to create an image reflection.
The value of the box-reflect property can be: below, above, left , or right.
img {
  -webkit-box-reflect: below 20px;
}

* object-fit Property :
The CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its container.
This property tells the content to fill the container in a variety of ways; such as "preserve that aspect ratio" or "stretch up and take up as much space as possible".

The object-fit property can take one of the following values:
fill - This is default. The image is resized to fill the given dimension. If necessary, the image will be stretched or squished to fit
contain - The image keeps its aspect ratio, but is resized to fit within the given dimension
cover - The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit
none - The image is not resized
scale-down - the image is scaled down to the smallest version of none or contain
Example>
img {
  width: 200px;
  height: 300px;
  object-fit: scale-down;
}

* object-position :
The CSS object-position property is used to specify how an <img> or <video> should be positioned within its container.
 we use object-fit: cover; to keep the aspect ratio and to fill the given dimension. However, the image will be clipped to fit.
 Let's say that the part of the image that is shown, is not positioned as we want. To position the image, we will use the object-position property.
 img {
  width: 200px;
  height: 300px;
  object-fit: cover;
  object-position: 15% 100%;
}

* Masking :
With CSS masking you create a mask layer to place over an element to partially or fully hide portions of the element.
The CSS mask-image property specifies a mask layer image.
To use a PNG or an SVG image as the mask layer, use a url() value to pass in the mask layer image.
The mask image needs to have a transparent or semi-transparent area. Black indicates fully transparent.
.mask1 {
  -webkit-mask-image: url(w3logo.png);
  mask-image: url(w3logo.png);
  mask-repeat: no-repeat;
}

* Multi-column Layout :
The CSS multi-column layout allows easy definition of multiple columns of text - just like in newspapers.
div {
  column-count: 3;
}
The following table lists all the multi-columns properties: 
Property : Description
column-count : Specifies the number of columns an element should be divided into
column-fill : Specifies how to fill columns
column-gap : Specifies the gap between the columns
column-rule : A shorthand property for setting all the column-rule-* properties
column-rule-color : Specifies the color of the rule between columns
column-rule-style : Specifies the style of the rule between columns
column-rule-width : Specifies the width of the rule between columns
column-span : Specifies how many columns an element should span across
column-width : Specifies a suggested, optimal width for the columns
columns : A shorthand property for setting column-width and column-count
div {
  column-rule: 1px solid lightblue;
}

* User Interface :
CSS user interface properties:
resize
outline-offset

The resize property specifies if (and how) an element should be resizable by the user.
div {
  resize: vertical / horizontal / both / none;
  overflow: auto;
}

The outline-offset property adds space between an outline and the edge or border of an element.

* CSS Variables :
The var() function is used to insert the value of a CSS variable.
CSS variables have access to the DOM, which means that you can create variables with local or global scope, change the variables with JavaScript, and change the variables based on media queries.

A good way to use CSS variables is when it comes to the colors of your design. Instead of copy and paste the same colors over and over again, you can place them in variables.

Syntax>
var(--name, value);
name : Required. The variable name (must start with two dashes)
value : Optional. The fallback value (used if the variable is not found)

First of all, CSS variables can have a global or local scope.
Global variables can be accessed/used through the entire document, while local variables can be used only inside the selector where it is declared.
To create a variable with global scope, declare it inside the :root selector. The :root selector matches the document's root element.
To create a variable with local scope, declare it inside the selector that is going to use it.

Example>
:root {
  --blue: #1e90ff;
  --white: #ffffff;
}

body { background-color: var(--blue); }

h2 { border-bottom: 2px solid var(--blue); }

.container {
  color: var(--blue);
  background-color: var(--white);
  padding: 15px;
}


11. CSS Transforms, Transitions & Animations : (**imp**)

A. 2D Transforms :
CSS transforms allow you to move, rotate, scale, and skew elements.

With the CSS transform property you can use the following 2D transformation methods:
translate()
rotate()
scaleX()
scaleY()
scale()
skewX()
skewY()
skew()
matrix()

* The translate() method moves an element from its current position (according to the parameters given for the X-axis and the Y-axis).
The following example moves the <div> element 50 pixels to the right, and 100 pixels down from its current position:
div {
  transform: translate(50px, 100px);
}

* The rotate() method rotates an element clockwise or counter-clockwise according to a given degree.
Using negative values will rotate the element counter-clockwise.
div {
  transform: rotate(20deg);
}

* The scale() method increases or decreases the size of an element (according to the parameters given for the width and height).
div {
  transform: scale(2, 3);
}

* The scaleX() method increases or decreases the width of an element.
div {
  transform: scaleX(2);
}

* The scaleY() method increases or decreases the height of an element.
div {
  transform: scaleY(3);
}

* The skewX() method skews an element along the X-axis by the given angle.
div {
  transform: skewX(20deg);
}

* The skewY() method skews an element along the Y-axis by the given angle.
div {
  transform: skewY(20deg);
}

* The skew() method skews an element along the X and Y-axis by the given angles.
div {
  transform: skew(20deg, 10deg);
}

* The matrix() method combines all the 2D transform methods into one.
The matrix() method take six parameters, containing mathematic functions, which allows you to rotate, scale, move (translate), and skew elements.
The parameters are as follow: matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())
div {
  transform: matrix(1, -0.3, 0, 1, 0, 0);
}

B. 3D Transforms :
With the CSS transform property you can use the following 3D transformation methods:
rotateX()
rotateY()
rotateZ()

* The rotateX() method rotates an element around its X-axis at a given degree:
#myDiv {
  transform: rotateX(150deg);
}

* The rotateY() method rotates an element around its Y-axis at a given degree:
#myDiv {
  transform: rotateY(150deg);
}

* The rotateZ() method rotates an element around its Z-axis at a given degree:
#myDiv {
  transform: rotateZ(90deg);
}

C. CSS Transitions :
CSS transitions allows you to change property values smoothly, over a given duration.
It has these properties:
transition
transition-delay
transition-duration
transition-property
transition-timing-function

To create a transition effect, you must specify two things:
the CSS property you want to add an effect to
the duration of the effect
Note: If the duration part is not specified, the transition will have no effect, because the default value is 0.

The following example shows a 100px * 100px red <div> element. The <div> element has also specified a transition effect for the width property, with a duration of 2 seconds:
div {
  width: 100px;
  height: 100px;
  background: red;
  transition: width 2s;
}
The transition effect will start when the specified CSS property (width) changes value.
Now, let us specify a new value for the width property when a user mouses over the <div> element:
div:hover {
  width: 300px;
}

* Specify the Speed Curve of the Transition
The transition-timing-function property specifies the speed curve of the transition effect.

The transition-timing-function property can have the following values:
ease - specifies a transition effect with a slow start, then fast, then end slowly (this is default)
linear - specifies a transition effect with the same speed from start to end
ease-in - specifies a transition effect with a slow start
ease-out - specifies a transition effect with a slow end
ease-in-out - specifies a transition effect with a slow start and end
cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function

The transition-delay property specifies a delay (in seconds) for the transition effect.

The following example adds a transition effect to the transformation:
div {
  transition: width 2s, height 2s, transform 2s;
}

The CSS transition properties can be specified one by one, like this:
div {
  transition-property: width;
  transition-duration: 2s;
  transition-timing-function: linear;
  transition-delay: 1s;
}
or by using the shorthand property transition:
div {
  transition: width 2s linear 1s;
}

D. CSS Animations :
CSS allows animation of HTML elements without using JavaScript!
It has these properties :
@keyframes
animation-name
animation-duration
animation-delay
animation-iteration-count
animation-direction
animation-timing-function
animation-fill-mode
animation

An animation lets an element gradually change from one style to another.
You can change as many CSS properties you want, as many times as you want.
To use CSS animation, you must first specify some keyframes for the animation.
Keyframes hold what styles the element will have at certain times.

* The @keyframes Rule :
When you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current style to the new style at certain times.
To get an animation to work, you must bind the animation to an element.
The following example binds the "example" animation to the <div> element. The animation will last for 4 seconds, and it will gradually change the background-color of the <div> element from "red" to "yellow":
Example>
/* The animation code */
@keyframes example {
  from {background-color: red;}
  to {background-color: yellow;}
}

/* The element to apply the animation to */
div {
  width: 100px;
  height: 100px;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
}

Note: The animation-duration property defines how long an animation should take to complete. If the animation-duration property is not specified, no animation will occur, because the default value is 0s (0 seconds). 

Example>
/* The animation code */
@keyframes example {
  0%   {background-color:red; left:0px; top:0px;}
  25%  {background-color:yellow; left:200px; top:0px;}
  50%  {background-color:blue; left:200px; top:200px;}
  75%  {background-color:green; left:0px; top:200px;}
  100% {background-color:red; left:0px; top:0px;}
}

/* The element to apply the animation to */
div {
  width: 100px;
  height: 100px;
  position: relative;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
}

* The animation-delay property specifies a delay for the start of an animation.
animation-delay: -2s;

* The animation-iteration-count property specifies the number of times an animation should run.
animation-iteration-count: 3;

* animation-direction :
The animation-direction property specifies whether an animation should be played forwards, backwards or in alternate cycles.

The animation-direction property can have the following values:
normal - The animation is played as normal (forwards). This is default
reverse - The animation is played in reverse direction (backwards)
alternate - The animation is played forwards first, then backwards
alternate-reverse - The animation is played backwards first, then forwards
Example>
animation-direction: reverse;

* The animation-timing-function property specifies the speed curve of the animation.
It has same properties like transition-timing-function. ease, linear etc...

* fill-mode For an Animation :
CSS animations do not affect an element before the first keyframe is played or after the last keyframe is played. The animation-fill-mode property can override this behavior.
The animation-fill-mode property specifies a style for the target element when the animation is not playing (before it starts, after it ends, or both).

The animation-fill-mode property can have the following values:
none - Default value. Animation will not apply any styles to the element before or after it is executing
forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)
backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period
both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions

Example>
div {
  width: 100px;
  height: 100px;
  background: red;
  position: relative;
  animation-name: example;
  animation-duration: 3s;
  animation-fill-mode: forwards;
}

* The example below uses six of the animation properties:
div {
  animation-name: example;
  animation-duration: 5s;
  animation-timing-function: linear;
  animation-delay: 2s;
  animation-iteration-count: infinite;
  animation-direction: alternate;
}

The same animation effect as above can be achieved by using the shorthand animation property:
div {
  animation: example 5s linear 2s infinite alternate;
}


12. Media Queries, Flexbox & Grid : (**imp**)

A. Media Queries :
The @media rule, introduced in CSS2, made it possible to define different style rules for different media types.
Media queries in CSS3 extended the CSS2 media types idea: Instead of looking for a type of device, they look at the capability of the device.

Media queries can be used to check many things, such as:
width and height of the viewport
orientation of the viewport (landscape or portrait)
resolution

* CSS Media Types :
Value : Description
all	: Used for all media type devices
print	: Used for print preview mode
screen : Used for computer screens, tablets, smart-phones etc.

* CSS Common Media Features :
Value	: Description
orientation	: Orientation of the viewport. Landscape or portrait
max-height : Maximum height of the viewport
min-height : Minimum height of the viewport
height : Height of the viewport (including scrollbar)
max-width : Maximum width of the viewport
min-width : Minimum width of the viewport
width : Width of the viewport (including scrollbar)

* Media Query Syntax :
A media query consists of a media type and can contain one or more media features, which resolve to either true or false.

@media not|only mediatype and (media feature) and (media feature) {
  CSS-Code;
}

The mediatype is optional (if omitted, it will be set to all). However, if you use not or only, you must also specify a mediatype.

The result of the query is true if the specified media type matches the type of device the document is being displayed on and all media features in the media query are true. When a media query is true, the corresponding style sheet or style rules are applied, following the normal cascading rules.

Meaning of the not, only, & and keywords:
not: This keyword inverts the meaning of an entire media query.
only: This keyword prevents older browsers that do not support media queries from applying the specified styles. It has no effect on modern browsers.
and: This keyword combines a media type and one or more media features.

Example>
body {
  background-color: tan;
}

@media screen and (max-width: 992px) {
  body {
    background-color: blue;
  }
}

@media screen and (max-width: 600px) {
  body {
    background-color: olive;
  }
}

B. Flexbox :
The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure without using float or positioning.

The flex container becomes flexible by setting the display property to flex.
The flex container properties are:
flex-direction
flex-wrap
flex-flow
justify-content
align-items
align-content

* The flex-direction property defines in which direction the container wants to stack the flex items.
The column value stacks the flex items vertically (from top to bottom).
The column-reverse value stacks the flex items vertically (but from bottom to top).
The row value stacks the flex items horizontally (from left to right). (default)
The row-reverse value stacks the flex items horizontally (but from right to left).
Example>
.flex-container {
  display: flex;
  flex-direction: column;
}

* The flex-wrap property specifies whether the flex items should wrap or not.
The wrap value specifies that the flex items will wrap if necessary.
The nowrap value specifies that the flex items will not wrap (this is default).
The wrap-reverse value specifies that the flexible items will wrap if necessary, in reverse order.
Example>
.flex-container {
  display: flex;
  flex-wrap: wrap;
}

* The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties.
Example>
.flex-container {
  display: flex;
  flex-flow: row wrap;
}

* The justify-content property is used to align the flex items.
The center value aligns the flex items at the center of the container.
The flex-start value aligns the flex items at the beginning of the container (this is default).
The flex-end value aligns the flex items at the end of the container.
The space-around value displays the flex items with space before, between, and after the lines.
The space-between value displays the flex items with space between the lines.
Example> .flex-container {
  display: flex;
  justify-content: center;
}

* The align-items property is used to align the flex items.
The center value aligns the flex items in the middle of the container.
The flex-start value aligns the flex items at the top of the container.
The flex-end value aligns the flex items at the bottom of the container.
The stretch value stretches the flex items to fill the container (this is default).
The baseline value aligns the flex items such as their baselines aligns.
Example>
.flex-container {
  display: flex;
  height: 200px;
  align-items: center;
}

* The align-content property is used to align the flex lines.
The space-between value displays the flex lines with equal space between them.
The space-around value displays the flex lines with space before, between, and after them.
The stretch value stretches the flex lines to take up the remaining space (this is default).
The center value displays the flex lines in the middle of the container.
The flex-start value displays the flex lines at the start of the container.
The flex-end value displays the flex lines at the end of the container.
Note : Must specify height of flex container to use align-content property.
Example>
.flex-container {
  display: flex;
  height: 600px;
  flex-wrap: wrap;
  align-content: center;
}

* Flex Items :
The direct child elements of a flex container automatically becomes flexible (flex) items.
The flex item properties are:
order
flex-grow
flex-shrink
flex-basis
flex
align-self

* The order property specifies the order of the flex items.
The first flex item in the code does not have to appear as the first item in the layout.
The order value must be a number, default value is 0.
Example>
<div class="flex-container">
  <div style="order: 3">1</div>
  <div style="order: 2">2</div>
  <div style="order: 4">3</div>
  <div style="order: 1">4</div>
</div>

* The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items.
The value must be a number, default value is 0.
Example>
<div class="flex-container">
  <div style="flex-grow: 1">1</div>
  <div style="flex-grow: 1">2</div>
  <div style="flex-grow: 8">3</div>
</div>

* The flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex items.
The value must be a number, default value is 1.
Example>
<div class="flex-container">
  <div>1</div>
  <div>2</div>
  <div style="flex-shrink: 0">3</div>
  <div>4</div>
</div>

* The flex-basis property specifies the initial length of a flex item.
<div class="flex-container">
  <div>1</div>
  <div>2</div>
  <div style="flex-basis: 200px">3</div>
  <div>4</div>
</div>

* The flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties.
Example>
<div class="flex-container">
  <div>1</div>
  <div>2</div>
  <div style="flex: 0 0 200px">3</div>
  <div>4</div>
</div>

* The align-self property specifies the alignment for the selected item inside the flexible container.
The align-self property overrides the default alignment set by the container's align-items property.
Note: If height of specific item less than other items of flex container then you can see the affect of align-self property.
Example>
<div class="flex-container">
  <div>1</div>
  <div>2</div>
  <div style="align-self: center">3</div>
  <div>4</div>
</div>

C. Grid :
The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.

A grid layout consists of a parent element, with one or more child elements.
An HTML element becomes a grid container when its display property is set to grid or inline-grid.

All direct children of the grid container automatically become grid items.
The vertical lines of grid items are called columns.
The horizontal lines of grid items are called rows.
The spaces between each column/row are called gaps.

You can adjust the gap size by using one of the following properties:
row-gap
column-gap
gap

The gap property is a shorthand property for the row-gap and the column-gap.
Example>
.grid-container {
  display: grid;
  gap: 50px 100px;
}

The lines between columns are called column lines.
The lines between rows are called row lines.

Example> Place a grid item at column line 1, and let it end on column line 3:
.item1 {
  grid-column-start: 1;
  grid-column-end: 3;
}

Place a grid item at row line 1, and let it end on row line 3:
.item1 {
  grid-row-start: 1;
  grid-row-end: 3;
}

* All CSS Grid Properties :
Property : Description
column-gap : Specifies the gap between the columns
gap : A shorthand property for the row-gap and the column-gap properties
grid : A shorthand property for the grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and the grid-auto-flow properties
grid-area : Either specifies a name for the grid item, or this property is a shorthand property for the grid-row-start, grid-column-start, grid-row-end, and grid-column-end properties
grid-auto-columns : Specifies a default column size
grid-auto-flow : Specifies how auto-placed items are inserted in the grid
grid-auto-rows : Specifies a default row size
grid-column : A shorthand property for the grid-column-start and the grid-column-end properties
grid-column-end : Specifies where to end the grid item
grid-column-gap : Specifies the size of the gap between columns
grid-column-start : Specifies where to start the grid item
grid-gap : A shorthand property for the grid-row-gap and grid-column-gap properties
grid-row : A shorthand property for the grid-row-start and the grid-row-end properties
grid-row-end : Specifies where to end the grid item
grid-row-gap : Specifies the size of the gap between rows
grid-row-start : Specifies where to start the grid item
grid-template : A shorthand property for the grid-template-rows, grid-template-columns and grid-areas properties
grid-template-areas : Specifies how to display columns and rows, using named grid items
grid-template-columns : Specifies the size of the columns, and how many columns in a grid layout
grid-template-rows : Specifies the size of the rows in a grid layout
row-gap	Specifies the gap between the grid rows

* Grid Container :
To make an HTML element behave as a grid container, you have to set the display property to grid or inline-grid.
Grid containers consist of grid items, placed inside columns and rows.

* The grid-template-columns Property
The grid-template-columns property defines the number of columns in your grid layout, and it can define the width of each column.
The value is a space-separated-list, where each value defines the width of the respective column.

If you want your grid layout to contain 4 columns, specify the width of the 4 columns, or "auto" if all columns should have the same width.
Example> 
.grid-container {
  display: grid;
  grid-template-columns: auto auto auto auto;
}
Example>
.grid-container2 {
  display: grid;
  grid-template-columns: 80px 200px auto 40px;
}

Note: If you have more than 4 items in a 4 columns grid, the grid will automatically add a new row to put the items in.

* The grid-template-rows Property :
The grid-template-rows property defines the height of each row.
Example>
.grid-container {
  display: grid;
  grid-template-rows: 80px 200px;
}

* The justify-content property is used to align the whole grid inside the container.
Note: The grid's total width has to be less than the container's width for the justify-content property to have any effect.
Example>
.grid-container {
  display: grid;
  justify-content: center / space-evenly / space-around / space-between / start / end;
}

* The align-content property is used to vertically align the whole grid inside the container.
Note: The grid's total height has to be less than the container's height for the align-content property to have any effect.
Example>
.grid-container {
  display: grid;
  height: 400px;
  align-content: center / space-evenly / space-around / space-between / start / end;
}

* To horizontally & vertically center the grid items : Example>
.grid-container{
  display: grid;
  place-items: center;
}

* Grid Item :
A grid container contains grid items.
By default, a container has one grid item for each column, in each row, but you can style the grid items so that they will span multiple columns and/or rows.

* grid-column Property :
The grid-column property defines on which column(s) to place an item.
You define where the item will start, and where the item will end.
Note: The grid-column property is a shorthand property for the grid-column-start and the grid-column-end properties.

To place an item, you can refer to line numbers, or use the keyword "span" to define how many columns the item will span.

To place an item, you can refer to line numbers, or use the keyword "span" to define how many columns the item will span.

Example> Make "item1" start on column 1 and end before column 5:
.item1 {
  grid-column: 1 / 5;
}

Example> Make "item1" start on column 1 and span 3 columns: 
.item1 {
  grid-column: 1 / span 3;
}

Example> Make "item2" start on column 2 and span 3 columns:
.item2 {
  grid-column: 2 / span 3;
}

*  grid-row Property :
The grid-row property defines on which row to place an item.
You define where the item will start, and where the item will end.
Note: The grid-row property is a shorthand property for the grid-row-start and the grid-row-end properties.

To place an item, you can refer to line numbers, or use the keyword "span" to define how many rows the item will span:

Example> Make "item1" start on row-line 1 and end on row-line 4:
.item1 {
  grid-row: 1 / 4;
}

Example> Make "item1" start on row 1 and span 2 rows:
.item1 {
  grid-row: 1 / span 2;
}

* grid-area Property :
The grid-area property can be used as a shorthand property for the grid-row-start, grid-column-start, grid-row-end and the grid-column-end properties.

Example> Make "item8" start on row-line 1 and column-line 2, and end on row-line 5 and column line 6:
.item8 {
  grid-area: 1 / 2 / 5 / 6;
}

Example> Make "item8" start on row-line 2 and column-line 1, and span 2 rows and 3 columns:
.item8 {
  grid-area: 2 / 1 / span 2 / span 3;
}

* Naming Grid Items :
The grid-area property can also be used to assign names to grid items.
Named grid items can be referred to by the grid-template-areas property of the grid container.
Example>
.item1 { grid-area: header; }
.item2 { grid-area: menu; }
.item3 { grid-area: main; }
.item4 { grid-area: right; }
.item5 { grid-area: footer; }

.grid-container {
  grid-template-areas:
    'header header header header header header'
    'menu main main main right right'
    'menu footer footer footer footer footer';
}

Each row is defined by apostrophes (' ')
The columns in each row is defined inside the apostrophes, separated by a space.
Note: A period sign represents a grid item with no name.

* Order of the Items :
The Grid Layout allows us to position the items anywhere we like.
The first item in the HTML code does not have to appear as the first item in the grid.
Example>
@media only screen and (max-width: 500px) {
  .item1 { grid-area: 1 / span 3 / 2 / 4; }
  .item2 { grid-area: 3 / 3 / 4 / 4; }
  .item3 { grid-area: 2 / 1 / 3 / 2; }
  .item4 { grid-area: 2 / 2 / span 2 / 3; }
  .item5 { grid-area: 3 / 1 / 4 / 2; }
  .item6 { grid-area: 2 / 3 / 3 / 4; }
}


            ** End **


            