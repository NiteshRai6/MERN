*** Objects ***


30. javaScript object is a variable that can store multiple data in key-value pairs.
the key-value pairs of an object are referred to as properties. 

31. functions that are defined inside objects are called methods.
Just like we use () to call a function, we must use () to call methods.

32. We use this keyword in an object method to access a property of the same object. 
JavaScript Built-In Methods : console.log(), prompt(), concat(), toFixed() etc..
use the concat() method to concatenate (join) two strings. 
use the toFixed() method to round off a number into a fixed number of digits.

33. a constructor function is used to create and initialize objects.
// constructor function
function Person () {
    this.name = "John",
    this.age = 23
}

// create an object
const person = new Person();

// print object attributes
console.log(person.name);

Here, Person() is an object constructor function. And, we use the new keyword to create an object from a constructor function.

when this keyword is used in a constructor function, this refers to the specific object in which it is created. 

Object literals are used to create a single object.

On the other hand, constructor functions are useful if you want to create multiple objects.

Objects created from constructor functions are unique. Thus, you can add a new property to a particular object that isn't accessible to other objects.

On the other hand, when an object is created with an object literal, any object variable derived from that object will act as a clone of the original object.

34. JavaScript also has built-in constructors to create objects of various types.
Constructor	Description
Object()	Creates a new object with properties and methods.
String()	Constructs a string object for manipulating and representing textual data.
Number()	Constructs a number object for handling data and operations.
Boolean()	Constructs a boolean object representing true or false values 
             for logical operations.

35. You should not declare strings, numbers, and boolean values as objects because they slow down the program. Instead, declare them as primitive types using code such as let name = "John", let number = 57, etc.

36. In JavaScript, there are two kinds of object properties:
Data properties
Accessor properties

37. Accessor properties are methods that get or set the value of an object. For that, we use these two keywords:
get - to define a getter method to get the property value
set - to define a setter method to set the property value

const person = {
    // data property
    name: 'John',
    age: 23,
    // accessor property(getter)
    get getName() {
        return this.name;
    },
    //accessor property(setter)
    set changeName(newName) {
        this.name = newName;
    }
}

you can also use Object.defineProperty() method to add getters and setters. 
// getting property
Object.defineProperty(student, "getName", {
    get : function () {
        return this.firstName;
    }
});
// setting property
Object.defineProperty(student, "changeName", {
    set : function (value) {
        this.firstName = value;
    }
});

38. In JavaScript, prototypes allow properties and methods to be shared among instances of the function or object.
Properties or methods added to the prototype of a constructor function are accessible to all objects derived from it. 
/ add property
Car.prototype.color = "Red";
// add method
Car.prototype.drive = function() {
    console.log(`Driving ${this.model}`);
};

JavaScript always searches for properties in the objects of the constructor function first. Then, it searches in the prototype.
This process is known as prototype chaining. 

You should never modify the prototype property of standard JavaScript built-in objects like strings, arrays, etc. It can cause major errors in your program.

The usage of the prototype has decreased significantly since the introduction of classes in ES6. However, you can still learn it to improve your understanding of JavaScript.

39. Prototype :
In JavaScript, the prototype is a fundamental concept that underlies how inheritance and object - oriented programming work.

A prototype is an object from which other objects inherit properties. Every JavaScript object has a prototype, which is another object from which the first object inherits methods and properties. This is known as prototypal inheritance.

A. Prototype Property :
Every JavaScript function has a prototype property. This property is an object that is used to build __proto__ for objects created using that function as a constructor.

B. proto Property: :
Every JavaScript object (with the exception of Object.create(null)) has an internal property called __proto__. This property is a reference to the prototype object from which the object has inherited properties.
__proto__ is not the same as the prototype property, though they are related.

C. Prototype Chain :
When a property or method is accessed on an object, JavaScript first looks at the object itself. If the property or method is not found, it then looks at the object's prototype, and so on, up the prototype chain until it reaches Object.prototype, the root of all objects.

Creating Objects with Prototypes :
A. Using Constructor Functions :
Constructor functions allow you to create objects and set up a prototype chain.
B. Using Object.create() :
This method creates a new object with the specified prototype object and properties.

Advantages of Prototypes :
A. Memory Efficiency :
Methods are shared across all instances. If a method is defined on the prototype, all instances of the constructor function share that method, which saves memory.

B. Dynamic Behavior :
Changes to the prototype are reflected in all instances. If you add a method to the prototype later, all instances of the constructor function will have access to that method.

Prototype Methods :
isPrototypeOf :
Checks if an object exists in another object’s prototype chain.

hasOwnProperty :
Checks if a property is directly on the object and not on its prototype.

ES6 Classes and Prototypes :
ES6 introduced a new syntax for creating objects and dealing with prototypes through classes. This is syntactic sugar over the existing prototype-based inheritance.

40. Enumerable :
In JavaScript, the term "enumerable" refers to a property attribute that determines whether or not a property of an object can be iterated over in a for...in loop or enumerated using functions like Object.keys(), Object.values(), and Object.entries().

In JavaScript, the term "enumerable" refers to a property attribute that determines whether or not a property of an object can be iterated over in a for...in loop or enumerated using functions like Object.keys(), Object.values(), and Object.entries(). Here’s a detailed explanation:

Property Attributes :
Every property in a JavaScript object has attributes that describe its behavior. These attributes include:
value: The value of the property.
writable: If true, the value of the property can be changed.
enumerable: If true, the property will be enumerated in for...in loops and by Object.keys() methods.
configurable: If true, the property can be deleted and these attributes can be modified.

The Enumerable Attribute :
Enumerable Properties: Properties that can be enumerated over in a for...in loop or be included in the arrays returned by Object.keys(), Object.values(), and Object.entries().
Non-Enumerable Properties: Properties that will not show up in such enumerations.
By default, properties added to an object directly (using object literal syntax or by simple assignment) are enumerable.

You can check if a property is enumerable using the propertyIsEnumerable method:

You can define or change the enumerability of a property using Object.defineProperty.

When you enumerate properties using for...in or Object.keys(), only enumerable properties are considered:

Common Use Cases :
Hiding Properties: Sometimes, you might want to hide certain properties from enumeration. For instance, methods added to an object prototype are usually non-enumerable to avoid cluttering the output of for...in loops.
Extending Built-in Objects: When extending built-in objects (like adding methods to Array.prototype), making properties non-enumerable prevents these new properties from appearing in loops that traverse arrays.

for...in Loop: The for...in loop iterates over all enumerable properties of an object, including those inherited from the prototype chain.

Object.keys(): The Object.keys() method returns an array of the object's own enumerable properties, excluding those on the prototype chain.

Enumeration: The process of iterating over the properties of an object.

Enumerated Properties: The properties that are listed or iterated over during the enumeration process.


*** End ***
