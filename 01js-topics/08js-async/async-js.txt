*** JavaScript Asynchronous ***


82. The setTimeout() method executes a block of code after the specified time. The method executes the code only once.
The commonly used syntax of JavaScript setTimeout is:
setTimeout(function, milliseconds);

The setTimeout() method returns an intervalID, which is a positive integer.

The program executes a block of code after the specified time interval. If you want to stop this function call, you can use the clearTimeout() method.
The syntax of clearTimeout() method is:
clearTimeout(intervalID);

When you pass additional parameters to the setTimeout() method, these parameters (parameter1, parameter2, etc.) will be passed to the specified function.

83. The function that is passed as an argument inside of another function is called a callback function.

The benefit of using a callback function is that you can wait for the result of a previous function call and then execute another function call.

The callback function is helpful when you have to wait for a result that takes time. For example, the data coming from a server because it takes time for data to arrive.

83. In JavaScript, a promise is a good way to handle asynchronous operations. It is used to find out if the asynchronous operation is successfully completed or not.

A promise may have one of three states.

Pending
Fulfilled
Rejected

A promise starts in a pending state. That means the process is not complete. If the operation is successful, the process ends in a fulfilled state. And, if an error occurs, the process ends in a rejected state.

For example, when you request data from the server by using a promise, it will be in a pending state. When the data arrives successfully, it will be in a fulfilled state. If an error occurs, then it will be in a rejected state.

84. To create a promise object, we use the Promise() constructor.
let promise = new Promise(function(resolve, reject){
     //do something
});

The Promise() constructor takes a function as an argument. The function also accepts two functions resolve() and reject().
If the promise returns successfully, the resolve() function is called. And, if an error occurs, the reject() function is called.

Promises are useful when you have to handle more than one asynchronous task, one after another. For that, we use promise chaining.
You can perform an operation after a promise is resolved using methods then(), catch() and finally().

Promises are similar to callback functions in a sense that they both can be used to handle asynchronous tasks.
JavaScript callback functions can also be used to perform synchronous tasks.

You can also use the finally() method with promises. The finally() method gets executed when the promise is either resolved successfully or rejected. 

84. Method	Description
all(iterable)	Waits for all promises to be resolved or any one to be rejected
allSettled(iterable)	Waits until all promises are either resolved or rejected
any(iterable)	Returns the promise value as soon as any one of the promises is fulfilled
race(iterable)	Wait until any of the promises is resolved or rejected
reject(reason)	Returns a new Promise object that is rejected for the given reason
resolve(value)	Returns a new Promise object that is resolved with the given value
catch()	Appends the rejection handler callback
then()	Appends the resolved handler callback
finally()	Appends a handler to the promise

85. We use the async keyword with a function to represent that the function is an asynchronous function. The async function returns a promise.

The await keyword is used inside the async function to wait for the asynchronous operation.
The use of await pauses the async function until the promise returns a result (resolve or reject) value.

While using the async function, you write the code in a synchronous manner. And you can also use the catch() method to catch the error. 

Benefits of Using async Function
The code is more readable than using a callback or a promise.
Error handling is simpler.
Debugging is easier.

These two keywords async/await were introduced in the newer version of JavaScript (ES8). 

86. In JavaScript, a block of code can be executed in specified time intervals. These time intervals are called timing events.
There are two methods for executing code at specific intervals. They are:
setInterval()
setTimeout()

*** End ***