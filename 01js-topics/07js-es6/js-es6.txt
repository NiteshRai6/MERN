*** JavaScript ES6 ***


 66. JavaScript ES6 (also known as ECMAScript2015 or ECMAScript6) is the sixth edition of JavaScript introduced in June 2015.

ECMAScript (European Computer Manufacturers Association Script) is the standard specification of JavaScript to ensure compatibility in all browsers and environments.

ES6 now allows you to declare variables using two more keywords: let and const.

The let keyword creates block-scoped variables, which means they are only accessible within a particular block of code. 
The const keyword creates constant variables that cannot be changed after declaration. 

67. JavaScript Arrow Functions are a concise syntax for writing function expressions.
// regular function 
let multiply = function(x, y) {
    return x * y;
};
// arrow function
let multiply = (x, y) => x * y;

If a function body has multiple statements, you need to put them inside curly brackets {}.

Inside a regular function, this keyword refers to the function where it is called.
However, this is not associated with arrow functions. So, whenever you call this, it refers to its parent scope.

Things You Should Avoid With Arrow Functions :

A. You should not use arrow functions to create methods inside objects.
let person = {
    name: "Jack",
    age: 25,
    sayName: () => {
        console.log(this.age);
    }
}
person.sayName(); // undefined

B. You cannot use an arrow function as a constructor.
let Foo = () => {};
let foo = new Foo();
// Output: TypeError: Foo is not a constructor

68. Starting from JavaScript ES6, we can provide default values for function parameters.
These default values are used when the function is called without passing the corresponding arguments.

69. JavaScript template literals are strings that allow us to embed variables or expressions directly within them. They are enclosed in backticks ``.
Hello ${name}` is a template literal and we have embedded the name variable directly within it.

${number1 + number2} is the embedded expression.
${number1} and ${number2} are the embedded variables.

Template literals allow any type of quotes to be included directly.
Create multiline strings using template literals.

Tagged templates are an advanced form of template literals in JavaScript. They allow you to parse template literals with a function.
Furthermore, you don't need to use parentheses () when passing the template literal to the function. For example,
function displayMessage(message) {
    return message;
}
// create a tagged template
let result = displayMessage`Hello Jack`
console.log(result);  // [ 'Hello Jack' ]

Here, unlike regular function arguments, the template literal is split into an array.
In our example, the function received an array with a single element (the string from the template literal). So, we obtained [ 'Hello Jack' ] as an output.

70. The JavaScript spread operator ... is used to expand or spread out elements of an iterable, such as an array, string, or object.
This makes it incredibly useful for tasks like combining arrays, passing elements to functions as separate arguments, or even copying arrays.

Clone Array Using Spread Operator.
You can also use the spread operator with object literals.

71. When the spread operator is used as a parameter, it is known as the rest parameter.
You can accept multiple arguments in a function call using the rest parameter.
Using the rest parameter will pass the arguments as array elements.
You can also use the spread operator as part of a function argument. 
If you pass multiple arguments using the spread operator, the function takes the required number of arguments and ignores the rest.

72. The JavaScript ES6 has introduced two new data structures, i.e Map and WeakMap.
Map is similar to objects in JavaScript that allows us to store elements in a key/value pair.
The elements in a Map are inserted in an insertion order. However, unlike an object, a map can contain objects, functions and other data types as key.

// create a set
let map1 = new Map();
// insert key-value pair
map1.set('info', {name: 'Jack', age: 26});
console.log(map1); // Map {"info" => {name: "Jack", age: 26}}

you can use the set() method to insert elements to map.
You can access Map elements using the get() method. 
You can use the has() method to check if the element is in a Map.
You can use the clear() and the delete() method to remove elements from a Map.
The delete() method returns true if a specified key/value pair exists and has been removed or else returns false.
The clear() method removes all key/value pairs from a Map object. 
You can get the number of elements in a Map using the size property. 
You can iterate through the Map elements using the for...of loop or forEach() method. The elements are accessed in the insertion order. 
You can iterate over the Map and get the key using the key() method. 
You can iterate over the Map and get the values using the values() method. 
You can iterate over the Map and get the key/value of a Map using the entries() method.

73. JavaScript Map vs Object :
Maps can contain objects and other data types as keys.	Objects can only contain strings and symbols as keys.
Maps can be directly iterated and their value can be accessed.	Objects can be iterated by accessing its keys.
The number of elements of a Map can be determined by size property.	The number of elements of an object needs to be determined manually.
Map performs better for programs that require the addition or removal of elements frequently.	Object does not perform well if the program requires the addition or removal of elements frequently.

74. The WeakMap is similar to a Map. However, WeakMap can only contain objects as keys.
When you try to add other data types besides objects, WeakMap throws an error.
Unlike Maps, WeakMaps are not iterable. 

75. The JavaScript ES6 has introduced two new data structures, i.e Set and WeakSet.
Set is similar to an array that allows us to store multiple items like numbers, strings, objects, etc. However, unlike an array, a set cannot contain duplicate values.

To create a Set, you need to use the new Set() constructor. 
You can access Set elements using the values() method and check if there is an element inside Set using has() method. 
const set1 = new Set([1, 2, 3, 3, 4]);
always pass value in [], inside set.

You can add elements to a Set using the add() method.
The delete() method removes a specific element from a Set. 
The clear() method removes all elements from a Set.

You can iterate through the Set elements using the for...of loop or forEach() method. The elements are accessed in the insertion order.

76. The WeakSet is similar to a Set. However, WeakSet can only contain objects whereas a Set can contain any data types such as strings, numbers, objects, etc.
When you try to add other data types besides objects, WeakSet throws an error. 

WeakSets have methods add(), delete(), and has().
Unlike Sets, WeakSets are not iterable.

77. Mathematical Set Operations
In JavaScript, Set does not provide built-in methods for performing mathematical operations such as union, intersection, difference, etc. However, we can create programs to perform those operations.

78. The destructuring assignment introduced in ES6 makes it easy to assign array values and object properties to distinct variables. 
// destructuring assignment
let { name, age, gender } = person;
 The order of the name does not matter in object destructuring.
 Note: When destructuring objects, you should use the same name for the variable as the corresponding object key.
 If you want to assign different variable names for the object key, you can use:
 let { name: name1, age: age1, gender:gender1 } = person;

 You can also perform array destructuring in a similar way. 
 const [x, y, z] = arrValue;

You can assign the default values for variables while using destructuring. 
let arrValue = [10];
// assigning default value 5 and 7
let [x = 5,  y = 7] = arrValue;

You can skip unwanted items in an array without assigning them to local variables. For example,
const [x, , z] = arrValue;

You can assign the remaining elements of an array to a variable using the spread syntax .... 
The variable with the spread syntax cannot have a trailing comma ,. You should use this rest element (variable with spread syntax) as the last variable.
let { name, ...rest } = person;

You can perform nested destructuring for array elements.
// nested array elements
const arrValue = ['one', ['two', 'three']];
// nested destructuring assignment in arrays
const [x, [y, z]] = arrValue;

79. In JavaScript ES6, classes provide a way to create blueprints for objects, similar to traditional object-oriented programming languages like C++ or Java.

A class constructor is a special method within a class that is automatically executed when a new object of that class is created.

A class method is a function inside a class that defines behaviors for the class's objects.

Inheritance enables you to define a class that takes all the functionality from a parent class and allows you to add more.

The super keyword used inside a child class denotes its parent class.

If a child class has the same method or property name as that of the parent class, it will use the method and property of the child class. This concept is called method overriding.

80. In JavaScript, there are three ways we can use a for loop.

JavaScript for loop
JavaScript for...in loop
JavaScript for...of loop
The for...of loop was introduced in the later versions of JavaScript ES6.

The for..of loop in JavaScript allows you to iterate over iterable objects (arrays, sets, maps, strings etc).

for...of Vs for...in :
The for...of loop is used to iterate through the values of an iterable.	The for...in loop is used to iterate through the keys of an object.
The for...of loop cannot be used to iterate over an object.	You can use for...in to iterate over an iterable such arrays and strings but you should avoid using for...in for iterables.

81. In JavaScript, proxies (proxy object) are used to wrap an object and redefine various operations into the object such as reading, insertion, validation, etc. Proxy allows you to add custom behavior to an object or a function.

new Proxy(target, handler);
Proxy provides two handler methods get() and set().

Uses of Proxy :

A. For Validation :
You can use a proxy for validation. You can check the value of a key and perform an action based on that value.

B. Read Only View of an Object :
There may be times when you do not want to let others make changes in an object. In such cases, you can use a proxy to make an object readable only. 

C. Side Effects :
You can use a proxy to call another function when a condition is met.

*** End ***

