React Advanced Topics for Functional Components : 
1. Higher-Order Component (HOC)
2. Error Boundaries
3. Redux
4. React Concurrent Mode / Features
5. forward Ref
6. React TanStack Query 
7. React <StrictMode>
8. JSX Compilation
9. React <StrictMode>
10. Axios



1. Higher-Order Component (HOC)  :
A Higher-Order Component (HOC) in React is an advanced pattern used to enhance the functionality of components. It is a function that takes a component as an argument and returns a new component with additional props or behavior. HOCs are commonly used for code reuse, logic abstraction, and enhancing component functionalities without modifying their implementation.

An HOC is essentially a pure function that wraps a component, adds some functionality, and returns a new component. The new component can either enhance the original component's behavior, modify its props, or even render a completely different output based on certain conditions.

The key feature of HOCs is that they do not modify the original component but instead create a wrapper component that adds or modifies the functionality. This allows for separation of concerns and promotes code reuse.

* ...props ensures that all props passed to the HOC are also passed to the wrapped component.

Example :
import React from 'react';

// HOC that adds a greeting message to the wrapped component
function withGreeting(WrappedComponent) {
  return function EnhancedComponent(props) {
    return (
      <div>
        <p>Hello, user!</p>
        <WrappedComponent {...props} />
      </div>
    );
  };
}

// Regular component
function SimpleComponent() {
  return <p>This is a simple component.</p>;
}

// Enhanced component
const EnhancedComponent = withGreeting(SimpleComponent);

// Usage in another part of the app
function App() {
  return <EnhancedComponent />;
}

export default App;


2. Error Boundaries :
Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. This prevents the entire React component tree from unmounting due to errors.

* Traditionally, error boundaries have been implemented using class components, as only class components can use lifecycle methods like componentDidCatch and static getDerivedStateFromError, which are essential for catching and handling errors.

Example 1:
class ErrorBoundary extends React.Component {
   constructor(props) {
        super(props);
        this.state = { hasError: false };
    }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, info) {
    // Log the error to an error reporting service
    console.error(error, info);
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children;
  }
}

Example 2:
function MyComponent() {
  // Your component logic
  return <div>My Component</div>;
}

Example 3:
function App() {
  return (
    <ErrorBoundary>
      <MyComponent />
    </ErrorBoundary>
  );
}

Although you can't use componentDidCatch or getDerivedStateFromError in functional components, you can still wrap your functional components with class component-based error boundaries.

* Error Handling with Hooks in Functional Components :
React's useEffect hook can be used to catch errors that occur during asynchronous operations or side effects. However, useEffect itself doesnâ€™t inherently provide error boundaries, and React still recommends using class components for error boundaries.
Example :
function MyComponent() {
  React.useEffect(() => {
    try {
      // Some code that might throw an error
    } catch (error) {
      // Handle the error
      console.error(error);
    }
  }, []);
  return <div>My Component</div>;
}
In this example, errors thrown inside the useEffect are caught and handled, but this doesn't provide the same level of error isolation and recovery as an error boundary.

* Handling Errors with the ErrorBoundary Package :
As a workaround for error boundaries in functional components, developers can use third-party libraries like react-error-boundary. This library provides a functional component that behaves like an error boundary.

npm install react-error-boundary

Example :
import { ErrorBoundary } from 'react-error-boundary';

function ErrorFallback({ error }) {
  return <div role="alert">Something went wrong: {error.message}</div>;
}

function MyComponent() {
  // Your component logic
  return <div>My Component</div>;
}

function App() {
  return (
    <ErrorBoundary FallbackComponent={ErrorFallback}>
      <MyComponent />
    </ErrorBoundary>
  );
}


3. Redux & Redux Toolkit :
Redux is a predictable state container for JavaScript applications, commonly used with React. It helps manage the state of the application in a centralized and consistent way, making it easier to understand and debug complex applications.

* Core Concepts of Redux :

A. Store :
The store is a centralized state container that holds the entire state of the application.
It is created using the createStore function, which takes a reducer as an argument.

B. State :
The state is a plain JavaScript object that represents the entire state of the application.
It can only be changed through actions.

C. Actions :
Actions are plain JavaScript objects that describe what happened in the application.
Each action has a type property and may have additional data.
Actions are dispatched to the store to indicate that something has changed.

D. Reducers :
Reducers are pure functions that take the current state and an action as arguments and return a new state.
They specify how the state should change in response to actions.

E. Dispatch:
The dispatch function sends actions to the store, triggering the reducers to calculate a new state.

F. Selectors :
Selectors are functions that retrieve specific pieces of state from the store. They help encapsulate the state structure and improve maintainability.

* Redux Saga : A library for managing side effects in Redux applications.
Uses ES6 generators to handle asynchronous actions more efficiently.

* Redux Toolkit :
Redux Toolkit is the official, recommended way to write Redux logic. It provides a set of tools and best practices to make Redux easier to use, more efficient, and to minimize boilerplate.

Key Concepts of Redux Toolkit :
A. configureStore
B. createSlice
C. createAsyncThunk
D. createAction and createReducer
E. createEntityAdapter
F. Middleware Integration
G. RTK Query

A. configureStore :
configureStore is a function that simplifies the setup of a Redux store. It automatically includes good default middleware, integrates with Redux DevTools, and allows for easier setup of middleware and reducers.

B. createSlice :
createSlice is a utility that helps create a slice of the Redux state, including the reducer logic and action creators. It combines createAction and createReducer into a single function, reducing boilerplate.

C. createAsyncThunk :
createAsyncThunk is a function for handling asynchronous logic. It generates a thunk action creator that handles the different states of an async request (pending, fulfilled, and rejected).

D. createAction and createReducer :
These are utility functions to create actions and reducers with less boilerplate and better type inference.

E. createEntityAdapter :
createEntityAdapter helps manage normalized data in the Redux state, providing utilities for common operations like adding, updating, and removing items.

F. Middleware Integration :
Redux Toolkit simplifies the addition of middleware, including the default middleware and custom ones. Middleware can be added using the middleware property in configureStore.

G. RTK Query :
RTK Query is a powerful data-fetching and caching tool built on top of Redux Toolkit. It provides tools for fetching, caching, and synchronizing data from the server.

Example : 
Step 1: Set Up Your Project :
create React app by Vite or othrer way.
install redux toolkit : npm install @reduxjs/toolkit react-redux

Step 2. Create the Redux Slice :
// src/counterSlice.js
import { createSlice } from '@reduxjs/toolkit';

// Define the initial state for the counter
const initialState = { value: 0 };

// Create a slice for the counter
const counterSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    reset: (state) => {
      state.value = 0;
    },
  },
});

// Export the actions generated by createSlice
export const { increment, decrement, reset } = counterSlice.actions;

// Export the reducer to be included in the store
export default counterSlice.reducer;

Step 3: Configure the Store :
import { configureStore } from '@reduxjs/toolkit';
import counterReducer from './counterSlice';
import logger from 'redux-logger';

// Configure the store with the counter reducer
const store = configureStore({
  reducer: {
    counter: counterReducer,
  },
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),
});

export default store;

Here, redux-logger is added as a middleware to log actions and state changes.

Step 4: Integrate Redux with React :
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import store from './store';
import App from './App';
import './index.css';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);

Step 5: Create the React Component :
// src/App.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement, reset } from './counterSlice';

function App() {
  // Access the state and actions from the Redux store
  const count = useSelector((state) => state.counter.value);
  const dispatch = useDispatch();

  return (
    <div className="App">
      <h1>Counter</h1>
      <div>
        <button onClick={() => dispatch(decrement())}>-</button>
        <span>{count}</span>
        <button onClick={() => dispatch(increment())}>+</button>
      </div>
      <div>
        <button onClick={() => dispatch(reset())}>Reset</button>
      </div>
    </div>
  );
}

export default App;

Step 6: Style the Application (Optional)
Step 7: Run the Application

* Middlewares in Redux Toolkit :
Redux Toolkit provides several middlewares that help in managing side effects, logging, and other tasks that require action interception. Middleware in Redux acts as a bridge between the dispatching of an action and the point at which it reaches the reducer, allowing for additional processing or logic to be applied.
Key Middlewares are :

A. Redux Thunk: Handles asynchronous logic.

B. Redux DevTools: Enhances debugging capabilities.

C. Logger Middleware: Logs actions and state changes.

D. Custom Middleware: User-defined middlewares for specific needs.


4. React Concurrent Mode / Features :
React Concurrent Mode, also known as Concurrent Features, is an advanced set of features in React that allows applications to be more responsive by making it possible to interrupt and prioritize rendering work. This mode improves the user experience by ensuring that high-priority updates, such as responding to user inputs, are handled promptly, even when the application is performing heavy computations or rendering complex components.

* Traditional React rendering is synchronous, meaning that once rendering starts, it cannot be interrupted until it is completed. In contrast, Concurrent Mode introduces the ability to break up rendering work into smaller units and spread them over multiple frames. This allows the browser to continue handling user interactions and other high-priority tasks without being blocked by React's rendering process.

* Benefits of Concurrent Mode :
A. Improved Responsiveness
B. Smoother Rendering
C. Better Handling of Asynchronous Data

* Scenario: Search Filter with Data Fetching :
Imagine you have an e-commerce website with a product listing page that includes a search filter. Users can type into the search bar to filter products, and the filtered list is displayed in real-time. Additionally, the product details (like images and descriptions) are fetched asynchronously from a server.

Without Concurrent Mode, when a user types into the search bar, React would synchronously update the UI, potentially causing a delay if the rendering process is heavy or if data fetching takes time. This could lead to a poor user experience, as the application might lag or freeze briefly.

* Implementation with Concurrent Mode :

A. Interruptible Rendering :
As the user types into the search bar, React can pause the rendering of the product list if it becomes too slow, allowing other urgent tasks (like handling user input) to continue smoothly.

B. Prioritization :
User input (typing in the search bar) is treated as a high-priority update. Rendering the filtered list and fetching product details are treated as lower-priority tasks, ensuring that the application remains responsive to the user's actions.

C. Suspense for Data Fetching :
When fetching product details, you can use Suspense to display a loading state or placeholder while the data is being fetched. This ensures that the UI doesn't render incomplete data or freeze while waiting for the server response.

Ex> {isPending ? <div>Loading...</div> : null}
      <Suspense fallback={<div>Loading product details...</div>}>
        <ProductList query={searchQuery} />
      </Suspense>


5. Forward ref :
forwardRef is a function in React that allows you to pass a ref from a parent component down to one of its child components. This is particularly useful when you need to directly interact with a DOM element or a child component's instance, such as for manipulating focus, animations, or measuring the size of elements.

// MyInput.js
import React, { forwardRef } from 'react';
const MyInput = forwardRef((props, ref) => {
  return <input ref={ref} {...props} />;
});
export default MyInput;

// ParentComponent.js
import React, { useRef } from 'react';
import MyInput from './MyInput';

const ParentComponent = () => {
  const inputRef = useRef();

  const focusInput = () => {
    // Access the DOM node of the input and call focus
    inputRef.current.focus();
  };

  return (
    <div>
      <MyInput ref={inputRef} placeholder="Type here..." />
      <button onClick={focusInput}>Focus the input</button>
    </div>
  );
};

export default ParentComponent;

*  A component using forwardRef cannot have a ref prop itself, as it would override the forwarding mechanism.


6. React TanStack Query :
React TanStack Query, is a powerful library for managing server-state in React applications. It provides tools for fetching, caching, synchronizing, and updating server state, making it easier to manage asynchronous data in a way that is more declarative and efficient than traditional approaches.

* Key Features of React Query :

A. Data Fetching: Simplifies data fetching in React applications, offering out-of-the-box support for fetching, caching, and synchronizing data.

B. Caching: Automatically caches data and keeps it up-to-date, reducing the need for redundant network requests and improving performance.

C. Background Synchronization: Ensures that data is kept fresh by re-fetching data in the background at specified intervals or when certain conditions are met.

D. Pagination and Infinite Loading: Provides utilities for handling paginated data and infinite scrolling scenarios.

E. Mutations: Simplifies the process of sending data to the server, offering built-in support for optimistic updates, retries, and error handling.

F. DevTools: Includes development tools for monitoring and debugging queries and mutations in real-time.

* Core Concepts :

A. Queries :
Queries are the primary mechanism for fetching data in React Query. They are defined using the useQuery hook, which provides state and utilities for managing data fetching.

Example :
import { useQuery } from '@tanstack/react-query';

function fetchUser(userId) {
  return fetch(`/api/user/${userId}`).then(response => response.json());
}

function UserProfile({ userId }) {
  const { data, error, isLoading } = useQuery(['user', userId], () => fetchUser(userId));

  if (isLoading) return 'Loading...';
  if (error) return 'An error occurred';

  return <div>User name: {data.name}</div>;
}

B. Mutations :
Mutations are used for creating, updating, or deleting data on the server. The useMutation hook is used to handle mutations, providing tools for managing their lifecycle, including optimistic updates, retries, and error handling.

C. Query Invalidation and Refetching :
React Query provides mechanisms for invalidating queries, which marks them as "stale" and triggers a refetch. This is useful for keeping data in sync with the server, especially after performing mutations.

D. Optimistic Updates :
Optimistic updates allow your UI to respond immediately to a mutation, before waiting for the server response. This can improve user experience by making interactions feel more responsive.


7. React <StrictMode> :
<StrictMode> is a special component in React that helps developers identify potential issues in their application. It activates additional checks and warnings for its descendants, providing a development-only tool that ensures your React components adhere to best practices and are future-proof.

* Key Features of <StrictMode> :

A. Identifies Unsafe Lifecycles:
React's <StrictMode> warns about deprecated lifecycle methods like componentWillMount, componentWillReceiveProps, and componentWillUpdate. These methods will eventually be removed, so using <StrictMode> helps ensure you're not relying on them in your components.

B. Warns About Legacy API Usage :
It flags the use of legacy string ref API (ref="someRef") and suggests using the callback pattern or React.createRef() instead, which are safer and more modern approaches.

C. Checks for Unexpected Side Effects :
<StrictMode> helps identify unexpected side effects in your components by double-invoking certain lifecycle methods and effects (like componentDidMount and useEffect), as well as constructors. This is done to ensure that these methods are idempotent (i.e., they can be run multiple times without causing unintended side effects).

D. Detects Legacy Context API :
It highlights the use of the old context API (contextTypes, childContextTypes) and encourages the use of the new Context API (React.createContext) introduced in React 16.3, which is more reliable and easier to use.

E. Ensures Reusability :
By helping developers adhere to best practices, <StrictMode> ensures that components are reusable and maintainable.

Example :
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

Notes :

A. Development-Only: <StrictMode> checks and warnings are only active in development mode. They do not affect the production build, meaning there is no runtime cost associated with using <StrictMode> in production.

B. Double Invoking: The double invocation of certain lifecycle methods and effects might lead to confusion if developers are unaware of this behavior. It's crucial to understand that this is a deliberate feature to help identify potential side effects.


8. JSX Compilation :
JSX is not valid JavaScript that browsers can interpret directly. Therefore, it needs to be compiled into standard JavaScript before it can be run in the browser. This process is typically handled by a build tool like Babel.

* Before the browser can understand this JSX code, it must be transformed into plain JavaScript. The compilation step involves converting JSX syntax into React.createElement() calls, which are standard JavaScript functions that the React library understands.

* Babel :
Babel is a popular JavaScript compiler that is commonly used in React projects. It transforms JSX into JavaScript as part of the build process. Babel can also transpile modern JavaScript features (ES6+) into versions compatible with older browsers, ensuring broad compatibility.

* Webpack and Other Build Tools :
In addition to Babel, build tools like Webpack are often used to bundle and optimize JavaScript files, including those transformed from JSX. Webpack can also handle other assets like CSS, images, and fonts, making it a comprehensive solution for preparing React applications for deployment.
Webpack uses loaders, such as babel-loader, to process files. 


9. CORS :
Cross-Origin Resource Sharing (CORS) is a security feature implemented in web browsers that allows or restricts web applications from making requests to a domain different from the one that served the web page. This policy helps prevent security risks, such as Cross-Site Request Forgery (CSRF), by enforcing rules on how web applications can interact with resources from different origins.

In the context of React, CORS issues commonly arise when a React application tries to fetch data from an external API that is hosted on a different domain or port. If the API server does not explicitly allow the origin of the React application, the browser will block the request, resulting in a CORS error.

* Understanding CORS :

A. Origin: 
An origin is defined by the scheme (protocol), hostname (domain), and port of a URL. For example, the origin of https://example.com:3000 is different from http://example.com and https://api.example.com.

B. Same-Origin Policy: 
This is a security measure implemented by browsers to prevent scripts on one origin from interacting with resources on another origin without permission. Under this policy, a web page can only make requests to the same origin from which it was served.

C. CORS Headers: 
CORS uses specific HTTP headers to manage cross-origin requests:

C1. Access-Control-Allow-Origin : 
Specifies which origins are allowed to access the resource.

C2. Access-Control-Allow-Methods : 
Specifies which HTTP methods (e.g., GET, POST, PUT) are allowed.

C3. Access-Control-Allow-Headers: 
Specifies which headers can be used in the request.
Access-Control-Allow-Credentials: Indicates whether or not the response to the request can be exposed when credentials are included.

* Handling CORS in React :
When developing a React application, you might encounter CORS issues while making API requests. Hereâ€™s how to address them :

A. Server-Side Configuration :
The most reliable way to handle CORS is to configure the server hosting the API to include the appropriate CORS headers in its responses.
Example :
const express = require('express');
const app = express();

app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', 'http://localhost:3000'); // Allow specific origin
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE'); // Allow specific methods
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization'); // Allow specific headers
  next();
});

// Your API routes here

app.listen(5000, () => {
  console.log('Server running on port 5000');
});

B. Using Proxy :
During development, you can set up a proxy to bypass CORS issues by proxying requests from your React development server to the API server. This way, your React application makes requests to the same origin, avoiding CORS restrictions.
configure a proxy in the package.json file:
"proxy": "http://localhost:5000"

C. CORS Middleware :
For backend frameworks, including a middleware solution to handle CORS is a common practice. Many backend frameworks provide built-in or third-party middleware solutions for handling CORS.
Example :
import cors from "cors";
const app = express();
app.use(
    cors({
        origin: "*",
        methods: "GET, POST, PUT, DELETE, PATCH"
    })
);

D. Client-Side Adjustments :
In some cases, CORS issues can be addressed on the client side by configuring the fetch request. For example, including credentials (cookies, HTTP authentication) requires the credentials option.
Example :
fetch('http://example.com/api/data', {
  method: 'GET',
  credentials: 'include' // Include credentials
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));


10. Axios :
Axios is a popular JavaScript library used for making HTTP requests from a web browser or Node.js. It's commonly used in React applications to interact with APIs, fetch data, or submit data to a server. Axios provides a simple and intuitive API that supports promises, making it easier to handle asynchronous operations.

* Key Features and Advantages of Axios in React :

A. Promise-Based API : 
Axios uses promises, which makes it easy to work with asynchronous code. It allows for straightforward handling of success and error cases using .then() and .catch() methods. This is especially useful in modern JavaScript development, where promises and async/await are standard for managing asynchronous operations.

B. Supports All HTTP Methods : 
Axios supports all standard HTTP methods, including GET, POST, PUT, DELETE, and more. This makes it versatile for interacting with RESTful APIs.

C. Automatic JSON Data Handling : 
Axios automatically transforms JSON data, both for requests and responses. It parses the JSON response to a JavaScript object and also stringifies JavaScript objects for JSON payloads in requests.

D. Request and Response Interceptors : 
Axios provides interceptors that allow you to modify requests or responses before they are handled by then or catch. This feature is beneficial for adding authentication tokens, logging, or handling global error messages.

E. Cancelation : 
Axios supports request cancelation, which can be useful for canceling ongoing requests when a component unmounts or when a new request supersedes an old one.

F. Transform Request and Response : 
Axios allows you to transform requests and responses. This feature is useful for custom formatting or processing data before sending or after receiving it.

G. Default Settings and Custom Configuration : 
You can set default headers, base URLs, and other configurations globally or per request. This helps in managing API endpoints, authentication headers, or any other settings consistently across requests.

H. Support for Older Browsers: 
Axios provides polyfills that make it compatible with older browsers, which may not fully support modern JavaScript features like promises.

* npm install axios
Example 1 :
 useEffect(() => {
    axios.get('https://api.example.com/data')
      .then(response => {
        setData(response.data);
      })
      .catch(error => {
        setError(error);
      });
  }, []);

Example 2 :
axios.interceptors.request.use(config => {
  // Modify config (e.g., add headers)
  return config;
}, error => {
  // Handle error
  return Promise.reject(error);
});

axios.interceptors.response.use(response => {
  // Modify response data
  return response;
}, error => {
  // Handle error
  return Promise.reject(error);
});

Example 3 :
const CancelToken = axios.CancelToken;
const source = CancelToken.source();

axios.get('/user/12345', {
  cancelToken: source.token
}).catch(error => {
  if (axios.isCancel(error)) {
    console.log('Request canceled', error.message);
  } else {
    // handle error
  }
});

// Cancel the request
source.cancel('Operation canceled by the user.');

* Axios vs Fetch :
Fetch is a native JavaScript API, so it doesnâ€™t require any additional libraries or installations. Fetch uses promises.

A. Handling JSON responses with Fetch requires an additional .then(response => response.json()) call.

B. Fetch does not automatically handle HTTP errors. You have to check response.ok and throw an error manually.

C. For older browsers, Fetch requires a polyfill to work, unlike Axios which has broader compatibility out-of-the-box.

D. Fetch does not support interceptors natively. You would need to manually wrap requests for similar functionality.

* Example 1:
import axios from 'axios';
axios.get('/api/data')
  .then(response => {
    console.log(response.data);
  })
  .catch(error => {
    console.error('There was an error!', error);
  });

* Example 2 :
fetch('/api/data')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => {
    console.log(data);
  })
  .catch(error => {
    console.error('There was an error!', error);
  });


12. React Flux architecture :
React's Flux architecture is a pattern for managing data flow in web applications. It was introduced by Facebook alongside React to address complexities in managing state and data flows in large applications. Flux emphasizes a unidirectional data flow, which simplifies understanding how data moves through the application, helps manage state predictably, and makes debugging easier.

* Core Concepts of Flux
Flux revolves around four main parts: Actions, Dispatcher, Stores, and Views. Each part plays a specific role in the data flow:

A. Actions
B. Dispatcher
C. Stores
D. Views (or Components)


                      ** End **

        