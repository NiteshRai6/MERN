React Basics Topics for Functional Components :

1. React Intro
2. JSX
3. React Virtual DOM
4. React Functional Components
5. Props
6. Handling Events in React 
7. Conditional Rendering
8. React List
9. React Forms
10. React Router
11. Performance Optimization in React
12. Extra



1. React Intro :
React is a popular JavaScript library for building user interfaces, particularly single-page applications where efficient, fast, and responsive user experience is crucial. Developed and maintained by Facebook, React emphasizes component-based architecture, which helps in creating reusable UI components.

React is an open-source JavaScript library used for building user interfaces, primarily in web applications. It allows developers to create large web applications that can change data, without reloading the page. The main goal of React is to be fast, scalable, and simple, making it easier to build complex UIs with minimal code.

Key Features of React :
A. Component-Based Architecture
B. Virtual DOM
C. Declarative UI
D. Unidirectional Data Flow
E. JSX (JavaScript XML)

Installing & Setup :
1. Install Node.Js 
2. Create React App By : 
Vite : npm create vite@latest
Next.js : npx create-next-app@latest
GatsBy

* React's Declarative UI Approach :
The declarative UI approach in React is a core concept that differentiates it from many other libraries and frameworks. It simplifies the process of building user interfaces by allowing developers to describe the desired end state of the UI rather than the sequence of events needed to achieve it. This is in contrast to the imperative programming style, where the developer explicitly details the steps to manipulate the DOM or other UI elements.
Developers can focus on what the UI should look like, 
rather than how to get it there. 

Example :
JSX as a Declarative Syntax
Component Rendering Based on State and Props
React's Virtual DOM and Efficient Updates

Benefits of Declarative UI :
Simplification of UI Logic
Predictability
Consistency
Reusability

* Unidirectional Data Flow :
In React, unidirectional data flow refers to the concept that data moves in a single direction: from parent components down to child components. This design principle is a core aspect of React's architecture and helps in maintaining a predictable and manageable state flow within an application.

In React, data is passed from parent components to child components via props. This means that the parent component controls the data and passes it down to the children as needed.
Child components cannot modify the props they receive. If a child needs to change some data, it must request the parent component to make the change, typically by calling a function passed down as a prop.


2. JSX  :
JSX stands for JavaScript XML. It's a syntax extension for JavaScript that looks similar to HTML or XML. JSX is used in React to describe the UI structure. It makes it easier for developers to write and visualize the structure of the component's UI. While JSX is not mandatory in React, it is widely used because of its syntactic simplicity and readability.
JSX is syntactic sugar for React.createElement.

* Key Features of JSX
A. HTML-Like Syntax :
JSX allows you to write elements in a syntax that resembles HTML. This makes the structure of the React component easy to understand and reason about, especially for those familiar with HTML.

B. Embedding Expressions :
You can embed JavaScript expressions within JSX by using curly braces {}. This is useful for displaying dynamic data, calling functions, or using variables directly in the JSX.

C. JSX is Not a Template Language :
Unlike traditional template languages, JSX is compiled to JavaScript. This means that you can use the full power of JavaScript within JSX, including loops, conditional statements, and more.

D. Custom Components and Capitalization :
In JSX, lowercase tag names are considered to be HTML elements, while uppercase tag names are treated as custom React components. This distinction is crucial for the JSX compiler to differentiate between standard HTML tags and React components.

E. Attributes and Props :
JSX attributes work similarly to HTML attributes but use camelCase naming convention for attributes like className instead of class, htmlFor instead of for, etc. These attributes can be passed as props to React components.

F. Styling and Inline Styles :
Inline styles can be added in JSX using the style attribute, which accepts an object with camelCased properties rather than a string.

* Example of JSX :
import React from 'react';
export default function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

* Using React Without JSX
React can be used without JSX by using the React.createElement() function directly. This function takes three arguments:
A. The type of element (e.g., 'div', 'h1', or a React component).
B. The props object (attributes and values, including event handlers and style).
C. The children (the content between the opening and closing tags).

* Example Without JSX :
import React from 'react';
export default function Welcome(props) {
  return React.createElement('h1', null, `Hello, ${props.name}`);
}


3. React Virtual DOM :
The Virtual DOM (VDOM) is a lightweight, in-memory representation of the real DOM. It's an abstraction that React uses to optimize the process of updating the user interface. The main advantage of the Virtual DOM is that it allows React to batch DOM updates and apply them efficiently, minimizing the direct manipulation of the actual DOM, which is a costly operation in terms of performance.

* How the Virtual DOM Works :
A. Initial Rendering :
When a React application starts, React creates a Virtual DOM tree that mirrors the structure of the actual DOM based on the initial state and props of the components.

B. State or Props Changes :
When the state or props of a component change, React creates a new Virtual DOM tree representing the UI after the changes.

C. Diffing Algorithm :
React compares the new Virtual DOM tree with the previous one using a process called "diffing." This algorithm identifies the minimal set of changes (or "diffs") needed to update the actual DOM to match the new Virtual DOM.

D. Reconciliation :
React applies the identified changes to the actual DOM. This process, called "reconciliation," ensures that the real DOM is updated efficiently and only where necessary, minimizing the performance impact.

* How React Internally Works :
React's internal workings involve several key concepts and mechanisms, including reconciliation, component lifecycle, hooks, and the rendering process.
A. Component Lifecycle Or React Hooks 
B. Reconciliation
C. React Fiber
D. Rendering Process
E. Optimization Techniques

Reconciliation :
Reconciliation is the process through which React updates the DOM. When state or props change:
Render Phase: React calls the render method or function component, generating a new Virtual DOM.
Diffing Phase: The new Virtual DOM is compared with the previous one.
Commit Phase: The minimal set of changes is applied to the real DOM.

React Fiber :
React Fiber is the new reconciliation engine introduced in React 16. It allows React to break down rendering work into units of work and spread them out over multiple frames. This makes React more responsive, especially in applications with complex rendering requirements, such as animations or heavy computations.

* Render Phase vs Commit Phase :

Render Phase :
A. Pure calculations, no side effects.
B. Determines the desired UI.
C. Involves virtual DOM and diffing.

Commit Phase:
A. Applies changes to the actual DOM.
B. Can include side effects.
C. Finalizes updates and triggers effects.


4. React Functional Components :
Functional components are a simpler way to write components in React. They are JavaScript functions that accept a single argument, props (short for properties), and return a React element. Unlike class components, functional components do not have their own state or lifecycle methods. However, with the introduction of React hooks, functional components can now manage state and side effects, making them as powerful as class components.

* A basic functional component is a JavaScript function that starts with 
Capital Letter and returns JSX.

* Key Characteristics of Functional Components
A. Simplicity : 
Functional components are plain JavaScript functions, which makes them easier to read, write, and understand. They are generally shorter and more straightforward than class components.

B. Stateless by Default : 
Initially, functional components were stateless, meaning they could not manage their own state. However, with the advent of hooks, functional components can now manage state and use lifecycle features.

C. No this Keyword : 
Unlike class components, functional components do not have a this context. This eliminates the need for binding event handlers and simplifies the component logic.

D. Hooks : 
Hooks like useState, useEffect, and others have revolutionized functional components, enabling them to handle state, side effects, context, and more.

* Advantages of Functional Components :
A. Simplicity and Readability
B. Performance
C. Easier Testing
D. Consistency

* Pure Component :
A "pure" component in React is a component that renders output purely based on its props and state, without any side effects or dependency on external factors. The primary goal of pure components is to optimize performance by preventing unnecessary re-renders when the input data (props or state) hasn't changed.
Ex> const MyComponent = ({ name }) => {
  return <div>Hello, {name}!</div>;
};


5. Props :
Props, short for properties, are a core concept in React. They are read-only data passed from a parent component to a child component. Props allow you to pass data and event handlers down the component tree, enabling components to communicate and share information.

Props are used to configure components and make them reusable by providing dynamic values. They are similar to function arguments and are passed to components in the same way as arguments are passed to functions. In a functional component, props are received as an argument to the function.

To pass data to a component, you include the props as attributes on the component in JSX. The values can be of any type, including strings, numbers, arrays, objects, and even functions.

* Props Validation with PropTypes :
PropTypes is a mechanism to enforce type-checking in React components. It helps in validating the types and requirements of props being passed to a component. This is particularly useful for catching bugs during development and ensuring that components are used correctly.
To use PropTypes, you need to install the prop-types package.
npm install prop-types

* Default Props :
Default props are used to define default values for props in case they are not provided. This is useful for making your components more robust and ensuring that they always have the necessary data to render correctly.

Example of props-type and default props :
import React from 'react';
import PropTypes from 'prop-types';

function Greeting({ name, age }) {
  return (
    <div>
      <h1>Hello, {name}!</h1>
      <p>You are {age} years old.</p>
    </div>
  );
}

Greeting.propTypes = {
  name: PropTypes.string,
  age: PropTypes.number,
};

Greeting.defaultProps = {
  name: 'Guest',
  age: 18,
};

export default Greeting;


* The children Prop
The children prop is a special prop in React that allows you to pass child elements directly into a component. This is useful for components that need to render or wrap other components or elements.
The children prop is especially powerful when creating reusable components like layout wrappers, modals, or higher-order components, where the specific child content can vary widely.

Example :
import React from 'react';
export default function Wrapper({ children }) {
  return <div className=" ">{children}</div>;
}

import React from 'react';
import Wrapper from './Wrapper';
export default function App() {
  return (
    <Wrapper>
      <h1>This is wrapped content</h1>
      <p>Here is some more content.</p>
    </Wrapper>
  );
}


6. Handling Events in React :
Handling events in React functional components is similar to handling events in vanilla JavaScript, but with a few important differences and advantages that align with React's declarative nature. React uses a synthetic event system, which is a layer on top of the native events, providing consistent behavior across different browsers.

In React, you define event handlers in your components and attach them to elements via JSX attributes that correspond to the event names. Event names in React are camelCase, unlike the lowercase naming in HTML.

Ex> import React from 'react';
export default function Button() {
  function handleClick() {
    alert('Button clicked!');
  }
  return (
    <button onClick={handleClick}>Click me</button>
  );
}
In this example:
The handleClick function is an event handler that displays an alert when the button is clicked.
The onClick attribute is used in JSX to attach the handleClick event handler to the button.

* Synthetic Events :
React uses a system called synthetic events to handle events in a consistent manner across all browsers. A synthetic event is a cross-browser wrapper around the browser's native event. This wrapper gives React more control over the event handling process, making it easier to optimize and manage event behavior.

* Key Features of Synthetic Events :

A. Consistency: Synthetic events ensure that events behave consistently across different browsers, which can have variations in event implementation.

B. Pooling: React pools synthetic events for performance reasons, reusing them for other events. This means that event properties may be nullified after the event handler has been called. If you need to access the event's properties asynchronously, you should call event.persist() to remove the event from the pool.

Example: Synthetic Event and Event Pooling :
import React from 'react';
export default function Input() {
  function handleChange(event) {
    console.log(event.target.value); // Works immediately
    event.persist(); // Remove from the pool
    setTimeout(() => {
      console.log(event.target.value); // Also works because we persisted the event
    }, 1000);
  }
  return (
    <input type="text" onChange={handleChange} />
  );
}

* Binding Event Handlers :
In functional components, event handlers are typically defined as functions or arrow functions within the component. Unlike class components, where this binding is often necessary, functional components do not require explicit binding because they do not use the this keyword.
Ex> <button onClick={handleClick} onMouseOver={handleMouseOver}>
      Hover or Click me
    </button>

* Passing Arguments to Event Handlers :
Sometimes, you may need to pass additional arguments to an event handler. This can be achieved by using an arrow function or by binding the function.
Example: Passing Arguments Using an Arrow Function :
import React from 'react';
function ListItem({ item, onItemSelect }) {
  return (
    <li onClick={() => onItemSelect(item)}>
      {item.name}
    </li>
  );
}

export default function List({ items, onItemSelect }) {
  return (
    <ul>
      {items.map(item => (
        <ListItem key={item.id} item={item} onItemSelect={onItemSelect} />
      ))}
    </ul>
  );
}
In this example :
The ListItem component uses an arrow function to pass the item object to the onItemSelect function when an item is clicked.
This approach ensures that the correct item is passed to the handler without creating unnecessary bindings or performance issues.

Example: Using .bind() (Less Common in Functional Components) :
import React from 'react';
export default function Button({ label, onClick }) {
  return (
    <button onClick={onClick.bind(null, label)}>
      {label}
    </button>
  );
}
In this example:
The .bind() method is used to pass the label as an argument to the onClick handler.
This method creates a new function with the bound arguments, but it's generally less favored in functional components due to potential performance implications and the simplicity of arrow functions.

* Best Practices :
Use arrow functions for passing arguments when necessary. They are concise and avoid issues with this context.
Avoid inline arrow functions for frequent or complex event handlers, as they can create new function instances on each render, potentially affecting performance. For simple cases or when performance is not a concern, they are generally fine.


7. Conditional Rendering :
Conditional rendering in React means displaying different components or elements based on certain conditions. This allows you to create dynamic UIs that can change in response to user input, state changes, or other factors.

A.  Using if-else and Ternary Operators :

* if-else Statement: This is the most straightforward way to implement conditional rendering. However, it can be less concise and isn't used directly in JSX. You typically use if-else outside the return statement.

* Ternary Operator: This is a more concise way to conditionally render elements within JSX.

B. Short-circuit Evaluation :
Short-circuit evaluation uses logical operators (&& or ||) to conditionally render elements. It's a compact way to render elements based on a single condition.

Using &&: Renders the second expression only if the first one is truthy.

Using ||: Often used to provide a fallback value if the first expression is falsy. It's less common for rendering JSX directly.

C. Rendering null or false :
In React, returning null or false from a component's render method or within JSX will result in nothing being rendered. This is useful for conditionally rendering components without leaving empty placeholders.


8. React Lists :
React allows you to render lists of elements by mapping over arrays and returning JSX for each element. The map function is a popular method for this purpose because it transforms each element of an array into a new element, typically a React component or a simple JSX element.
Ex> <ul>
      {items.map((item, index) => (
        <li key={index}>{item}</li>
      ))}
    </ul>

*  The Importance of Keys in Lists :
Keys are a special attribute that React uses to track and identify which items have changed, are added, or are removed from the list. Providing a unique key for each element helps React optimize the rendering process and update the UI efficiently without re-rendering the entire list. This is particularly important for performance, especially in large lists.


9. React Forms :
Handling forms in React involves managing user input and maintaining form state. React provides a way to control form elements using state, ensuring that the form elements' values are always in sync with the component's state.

A. Form Elements in React :
In React, form elements like <input>, <textarea>, and <select> maintain their own state and update it based on user input. However, in controlled components, React's state is the "single source of truth," and the form elements are controlled via props.

B. Controlled Components :
 Components where the form data is handled by the React component state. The form element's value is controlled by the component's state, and any user input updates the state via event handlers.

Example: Controlled Component :
function MyForm() {
  const [name, setName] = React.useState('');

  const handleChange = (event) => {
    setName(event.target.value);
  };

  return (
    <form>
      <label>
        Name:
        <input type="text" value={name} onChange={handleChange} />
      </label>
    </form>
  );
}
In this example, the value prop of the <input> is controlled by the component state (name). The onChange handler updates the state whenever the user types in the input field.

C. Uncontrolled Components :
Rely on the DOM to manage form data, using refs to access the form elements' current values. They are simpler but less in sync with the component's state.

Example: Uncontrolled Component :
function MyUncontrolledForm() {
  const inputRef = React.useRef(null);

  const handleSubmit = (event) => {
    event.preventDefault();
    alert('Name: ' + inputRef.current.value);
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input type="text" ref={inputRef} />
      </label>
      <button type="submit">Submit</button>
    </form>
  );
}
In this example, inputRef is used to access the value of the input element directly.

D. Handling Form Submissions :
Handling form submissions typically involves preventing the default browser behavior, gathering the form data, and then performing some action (like sending the data to a server or updating the state).

Example :
function MyForm() {
  const [formData, setFormData] = React.useState({
    name: '',
    email: '',
  });

  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log(formData);
    // Perform further actions, e.g., send data to a server
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input type="text" name="name" value={formData.name} onChange={handleChange} />
      </label>
      <label>
        Email:
        <input type="email" name="email" value={formData.email} onChange={handleChange} />
      </label>
      <button type="submit">Submit</button>
    </form>
  );
}
Here, the form data is managed in a state object (formData), and handleChange updates the state based on user input. handleSubmit prevents the default form submission and logs the form data.

E. Validation :
Form validation ensures that the user submits valid and complete data. Validation can be done at various stages:
Client-side Validation: Performed before data is sent to the server, typically using JavaScript.
Server-side Validation: Ensures that data is correct and complete on the server side, often as a backup to client-side validation.

* Controlled Component (Details) :
A "controlled" component in React is a component that does not maintain its own state, but rather receives all its data via props and notifies the parent component about any changes through callback functions. This approach gives the parent component full control over the component's data and behavior.

Controlled components are commonly used for form inputs to maintain control over the form state, validation, and submission.

Example :
import React, { useState } from 'react';

function ParentComponent() {
  const [inputValue, setInputValue] = useState('');

  const handleInputChange = (event) => {
    setInputValue(event.target.value);
  };

  return (
    <div>
      <ControlledInput value={inputValue} onChange={handleInputChange} />
      <p>Current value: {inputValue}</p>
    </div>
  );
}

function ControlledInput({ value, onChange }) {
  return <input type="text" value={value} onChange={onChange} />;
}

export default ParentComponent;


10. React Router :
React Router enables the creation of single-page applications (SPAs) where different views are rendered within the same page, based on the URL. It supports various navigation methods, including declarative routing and programmatic navigation.

* single-page applications (SPAs) means Page not reload.

* npm install react-router-dom

Then, wrap your application in a Router component, which can be either BrowserRouter or HashRouter. BrowserRouter uses the HTML5 history API to keep the UI in sync with the URL, while HashRouter uses the hash portion of the URL.

* Route, Link, and NavLink Components :

A. Route: The Route component renders UI when its path matches the current URL. It accepts props like path, component, and exact.

Example Main Routes :
import { BrowserRouter as Router, Route } from 'react-router-dom';

function App() {
  return (
   <Router>
      <Route path="/" exact component={HomePage} />
      <Route path="/about" component={AboutPage} />
      <Route path="/products" component={Products} />
    </Router>
  );
}

B. Link: The Link component is used to create navigation links. It prevents the default browser behavior and updates the URL without reloading the page.

C. NavLink: Similar to Link, but with additional styling capabilities. It can automatically apply an active class to the link when the URL matches.

Example Link & NavLink :
import {Link, NavLink } from 'react-router-dom';
function Navbar() {
  return (
    <nav>
      <Link to="/">Home</Link>

      <NavLink to="/about" activeClassName="active">About</NavLink>
    </nav>
  );
}

* Nested Routes: 
Nested routes allow you to define routes within other components. This is useful for rendering subcomponents or different sections of a page.
Example :
function Products() {
  return (
    <div>
      <h1>Products</h1>
      <Route path="/products/:productId" component={ProductDetail} />
    </div>
  );
}

* Route Parameters: 
Route parameters are used to capture dynamic values from the URL, which can then be accessed in the component.
Example :
function ProductDetail({ match }) {
  return <h2>Product ID: {match.params.productId}</h2>;
}

* Redirects : 
The Redirect component is used to programmatically navigate to a different route. This can be useful for redirecting users after form submissions or handling unauthorized access.
Example :
import { Redirect } from 'react-router-dom';
function Login({ isAuthenticated }) {
  if (isAuthenticated) {
    return <Redirect to="/dashboard" />;
  }
  return <div>Please log in</div>;
}

* Programmatic Navigation : 
You can use the useHistory hook to programmatically navigate to a different route. This hook provides access to the history instance used by React Router.
Example :
import { useHistory } from 'react-router-dom';
function MyComponent() {
  const history = useHistory();
  const navigateToHome = () => {
    history.push('/');
  };
  return <button onClick={navigateToHome}>Go Home</button>;
}

* Additional Considerations :

A. Switch Component: Use Switch to ensure that only the first matching route is rendered.

B. Custom Hooks: React Router provides hooks like useParams, useLocation, and useRouteMatch for accessing route data.

C. Route Guards: Implement route guards by conditionally rendering routes based on authentication or other conditions.


11. Performance Optimization in React :
Optimizing the performance of React applications is crucial for providing a smooth user experience, especially as applications grow in complexity. React offers several tools and techniques to enhance performance, including code splitting, memoization, and profiling.

A. Code Splitting :
It is a technique that allows you to split your application into smaller chunks, which can be loaded on demand. This reduces the initial load time by only loading the necessary code and deferring the loading of other parts until they are needed.

B. Lazy Loading :
It is a related concept where components are loaded only when they are required. React provides the React.lazy() function and Suspense component to implement lazy loading.

Suspense is a feature that allows you to handle asynchronous operations like data fetching, code splitting, or lazy loading in a more declarative way. It can display a fallback UI (like a loading spinner) while the asynchronous operation is in progress.

Example :
import React, { Suspense, lazy } from 'react';
const LazyComponent = lazy(() => import('./LazyComponent'));
function App() {
  return (
    <div>
      <Suspense fallback={<div>Loading...</div>}>
        <LazyComponent />
      </Suspense>
    </div>
  );
}

C. React.memo for Memoization
D. useMemo and useCallback Hooks

E. React Developer Tools Profiling :
React Developer Tools provide a profiling feature that helps identify performance bottlenecks in your application. You can measure how long each component takes to render and see which components are re-rendering unnecessarily.

Using React Profiler :
A. Install React Developer Tools in your browser.
B. Open the Profiler tab in the developer tools.
C. Record a profiling session while interacting with your application.
D. Analyze the results, looking for components that re-render frequently or take a long time to render.


12. Extra :
* MVC :
MVC (Model-View-Controller) is a design pattern commonly used for structuring applications. It separates an application into three main components:

Model: Manages the data and business logic.
View: Handles the display of the data (UI).
Controller: Acts as an intermediary between the Model and View, handling user input and updating the Model and View accordingly.

While React itself does not enforce a specific architectural pattern like MVC, it can be structured in an MVC-like manner. In a React application, these roles are typically represented as follows:

A. Model :
In a React application, the Model is represented by the state. like useState, useReducer, Redux.

B. View : 
The View in React is represented by the component tree that renders the UI. 

C. Controller :
In a React application, the Controller logic is often embedded within components or separated into utility functions or custom hooks. This logic handles user interactions, such as button clicks or form submissions, and updates the state accordingly.


                                    *** End ***

