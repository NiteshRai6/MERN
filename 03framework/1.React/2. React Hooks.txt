React Topics for Functional Components (Hooks) :
* React all hooks
* custom hooks
* React.memo (with useMemo hook)



* React Hooks :
Hooks are a fundamental feature introduced in React 16.8 that allow you to use state and other React features without writing class components. They provide a way to use Reactâ€™s stateful logic and lifecycle features in functional components, making it easier to share and reuse logic across components.

* Key Concepts of Hooks :
A. State Management
B. Side Effects
C. Reusability
D. Simplicity

* React enforces certain rules for using hooks to ensure consistent behavior :

A. Only Call Hooks at the Top Level:
Hooks should not be called inside loops, conditions, or nested functions. They must be called at the top level of the component or custom hook.
Only Call Hooks from React Functions:

B. Hooks should only be called from React functional components or custom hooks, not from regular JavaScript functions.

C. Any hook name must start with 'use' keyword and the hook name, that starts with capital letter.

* There are total 15 Available built-in hooks in React till react version 18.3.1 :

          * Main Hooks *
1. useState
2. useEffect
3. useReducer
4. useContext
5. useCallback 
6. useMemo
7. useRef
          * End *

8. useImperativeHandle
9. useLayoutEffect
10. useDebugValue
11. useTransition
12. useDeferredValue
13. useSyncExternalStore
14. useInsertionEffect
15. useId

There are 2 upcoming hook (Beta versions) :
1. useActionState
2. useOptimistic

                      ** Main Hooks **

1. React useState() hook :
The useState hook is a fundamental feature in React that allows you to add state to functional components. Before React 16.8, only class components could have state. However, with the introduction of hooks, functional components can now use state and other React features.

* The useState hook is used to declare state variables in functional components. 
const [state, setState] = useState(initialState);
state: This is the current state value.
setState: This is a function that allows you to update the state.
initialState: This is the initial value of the state.

Ex> const [count, setCount] = useState(0);
<button onClick={() => setCount(count + 1)}> Click me </button>

Key Concepts :
A. State Initialization:
The initial state can be any data type: a number, string, array, object, etc.
The initial state is set only during the first render.

B. State Update :
Calling setState does not immediately change the state. It schedules an update to the component's state.
React batches state updates and triggers a re-render to reflect the new state.

C. Preservation of State :
React preserves the state between renders. When the component re-renders, the state value remains the same as before the re-render unless it has been explicitly changed using the setState function.

D. Lazy Initialization :
If the initial state is expensive to compute, you can use a function to provide the initial state. This function will be called only once to set the initial state.
Ex> const [state, setState] = useState(() => {
  const initialState = computeExpensiveValue();
  return initialState;
});

* Common Patterns and Usage :
A. Toggling State : 
Frequently used for boolean states.
Ex> const [isToggled, setIsToggled] = useState(false);
function toggle() {
  setIsToggled(!isToggled);
}

B. Updating State with an Object : 
When using an object as the state, it's common to update a single property while keeping the other properties unchanged.
Ex> const [user, setUser] = useState({ name: 'John', age: 30 });
function updateUserAge() {
  setUser(prevUser => ({ ...prevUser, age: prevUser.age + 1 }));
}


2. React useEffect hook :
The useEffect hook is another fundamental feature in React that allows you to perform side effects in functional components. Before hooks, side effects were typically managed in class components using lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount. The useEffect hook combines these lifecycle phases into a single API.

* Side Effect Can be :
A. Fetching Data
B. Subscribing to Events
C. Conditional Effects

The useEffect hook takes two arguments: a function (often called the effect) and an optional dependency array.
useEffect(effect: () => void | (() => void), deps?: Array<any>);
effect: A function containing the side-effect logic. This function can optionally return another function (cleanup function) that cleans up the effect.
deps: An array of dependencies that determine when the effect should re-run. If omitted, the effect runs after every render.

Ex>  useEffect(() => {
    const interval = setInterval(() => {
      setCount(prevCount => prevCount + 1);
    }, 1000);

    // Cleanup function to clear the interval when the component unmounts
    return () => clearInterval(interval);
  }, []);

* Key Concepts :

A. Dependency Array :
The dependency array specifies when the effect should re-run.
If empty ([]), the effect runs only once, after the initial render.
If omitted, the effect runs after every render.
If dependencies are provided, the effect runs whenever any dependency changes.

B. Cleanup Function :
The function returned by the useEffect hook is used for cleanup. It runs before the effect is re-run (except for the first render) and when the component unmounts.

This cleanup is useful for clearing subscriptions, timers, or any other side effects that need to be cleaned up. It is Used to preventing memory leaks.

C. Side Effects and Component Lifecycle :
componentDidMount : Fetching Data,
componentDidUpdate : Changing in Dependency Array,
componentWillUnmount : Cleanup function

* Common Patterns and Usage :

A. Fetching Data :
async function fetchData() {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    setData(data);
  }
Ex> useEffect(() => {
  fetchData();
}, []);

B. Subscribing to Events: :
like WebSocket connections: For real-time updates from a server.
window resize example :
 useEffect(() => {
  function handleResize() {
    setWindowSize(window.innerWidth);
  }
  window.addEventListener('resize', handleResize);
  return () => window.removeEventListener('resize', handleResize);
}, []);

C. Conditional Effects :
useEffect(() => {
  if (someCondition) {
    // Perform the effect
  }
}, [someCondition]);

D. logging :
Logging using useEffect is a common practice for monitoring component lifecycle events, debugging, or tracking state and prop changes. The useEffect hook is a great place for such operations because it can be set to run after a component renders and re-renders, providing insights into how and when changes occur.

Ex>  useEffect(() => {
    console.log('Component mounted');
    return () => {
      console.log('Component unmounted');
    };
  }, []);

* Considerations and Best Practices :
A. Avoiding Stale Closures: Ensure that the effect does not depend on stale data by including all necessary dependencies in the dependency array.

B. Minimizing Effects: Keep effects minimal and focused on specific tasks. Complex logic should often be broken into multiple effects.

C. Performance Optimization: Be mindful of effects that depend on frequently changing state or props, as they can lead to performance issues due to frequent re-renders.

D. Avoiding Unnecessary Effects: If an effect doesn't have any dependencies, ensure that it's intentional, as it will run after every render.


Note :
In React, "avoiding stale closures" means ensuring that the values and functions used inside a useEffect hook are always current and reflect the latest state or props.

When you use a useEffect hook, React captures the values of variables and functions in a "closure" at the time the effect runs. If you don't include all necessary dependencies in the dependency array, you might end up with outdated or "stale" values. This can lead to bugs and unexpected behavior.


3. React useReducer hook :
The useReducer hook is a powerful alternative to the useState hook for managing state in React functional components, especially when dealing with more complex state logic. It is similar to the reducer function pattern found in libraries like Redux, where state transitions are handled by pure functions based on dispatched actions.

* The useReducer hook requires three arguments:
A. reducer: A function that determines the new state based on the current state and the action dispatched.
B. initialState: The initial state value.
C. init (optional): A function to lazily initialize the state if the initial state computation is complex.

* syntax :
const [state, dispatch] = useReducer(reducer, initialState, init);

state: The current state.
dispatch: A function used to dispatch actions to the reducer.
reducer: A function with the signature (state, action) => newState.
initialState: The initial value of the state.
init (optional): A function for lazy initialization of the state.

Example :
import React, { useReducer } from 'react';

const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
  }
}

export default function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
    </div>
  );
}

In this example:
reducer function defines how the state should change in response to various actions.
dispatch function is used to send actions to the reducer, which updates the state accordingly.

* Key Concepts :

A. Reducer Function:
The reducer function handles the logic for state transitions. It takes the current state and an action as arguments and returns the new state.
The function should be pure, meaning it should not have side effects and should return the same output given the same input.

B. Actions :
Actions are objects that contain a type property and may include additional data. The type property is typically a string that describes the action being performed.
Actions tell the reducer how to update the state.

C. Dispatch Function :
The dispatch function is used to send actions to the reducer. It triggers the state transition process.

D. Initial State :
The initialState is the starting state value for the reducer. If the state initialization is complex, a function can be provided to compute the initial state.

E. Lazy Initialization :
If the initial state is expensive to compute, you can pass an init function along with an initial argument. This function computes and returns the initial state.

* Benefits of useReducer :

A. Complex State Logic: 
useReducer is well-suited for components with complex state logic or when the next state depends on the previous state.

B. Predictable State Management: 
Since state updates are centralized in the reducer function, the flow of data and state changes is more predictable and easier to trace.

C. Component Isolation : 
The state logic is encapsulated within the component, reducing dependencies on external state management libraries.


4. React useContext hook :
The useContext hook in React allows you to access the value of a context in your functional components without needing to use the Consumer component or manually passing props down the component tree. This hook is particularly useful for global state management, where you want to share state or functions across many components without prop drilling.

* Context API Basics :
The Context API in React is used to create and share state or other data between components without having to pass props down manually at every level. It consists of a Provider and a Consumer :
A. Provider: A component that provides the value to its children.
B. Consumer: A component that consumes the value provided by a Provider.

syntax > const value = useContext(MyContext);
MyContext: This is the context object created by React.createContext().
value: This is the current context value, determined by the nearest MyContext.Provider above the calling component in the component tree.

Example :
import React, { createContext, useContext, useState } from 'react';

const ThemeContext = createContext();

export default function App() {
  return (
    <ThemeContext.Provider value="dark">
      <Toolbar />
    </ThemeContext.Provider>
  );
}

function Toolbar() {
  return (
    <div>
      <ThemedButton />
    </div>
  );
}

function ThemedButton() {
  const theme = useContext(ThemeContext);
  return <button 
  style={{ background: theme === 'dark' ? '#333' : '#CCC' }}>
  Themed Button </button>;
}

In this example :
A. ThemeContext is created with createContext().
B. App component uses ThemeContext.Provider to provide a value ("dark") to its children.
C. ThemedButton uses useContext(ThemeContext) to access the current theme value, which it uses to set the button's background color.

* Key Concepts :
A. Context Creation:
Contexts are created using React.createContext(), which returns a context object with Provider and Consumer components.

B. Provider Component :
The Provider component accepts a value prop, which becomes available to any component in its subtree that consumes the context.

C. useContext Hook :
The useContext hook allows functional components to access the context value without using a Consumer.

D. Reactivity :
Components using useContext will re-render whenever the context value changes.

* Best Practices :

A. Avoid Overuse:
Overusing context can lead to performance issues, as any change in the context value triggers a re-render in all consuming components. Itâ€™s often better to use context for static values or settings rather than frequently changing data.

B. Modularity :
Group related state and logic into specific contexts to maintain modularity and separation of concerns.

C. Default Values :
When creating a context, provide a default value. This is useful for testing components in isolation or when a Provider might not always be present.
Ex> const ThemeContext = createContext('light');

D. Avoid Heavy Computation in useContext :
The function passed to useContext should not include heavy computation or side effects; it should only access the context value.


5. React useCallback hook :
The useCallback hook in React is used to memoize functions, helping to optimize performance by preventing unnecessary re-creations of functions on every render. This can be particularly useful in components that are passing functions as props to child components or when using these functions as dependencies in other hooks like useEffect or useMemo.

const memoizedCallback = useCallback(callback, [dependencies]);

Key Concepts :
A. Function Identity :
In JavaScript, functions are reference types. Even if two functions have the same logic, they are not the same if they occupy different memory locations.
When functions are passed as props, changing the reference can cause child components to re-render even if the logic hasnâ€™t changed.

B. Memoization :
useCallback memoizes the function, meaning that it returns the same function instance between renders as long as the dependencies haven't changed. This prevents unnecessary re-creation of functions.

C. Dependencies Array :
Similar to the useEffect and useMemo hooks, useCallback relies on a dependencies array to determine when to re-create the memoized function. If any dependency changes, useCallback will create a new version of the function.

* Use Cases :

A. Performance Optimization:
In complex components where functions are passed down to child components, memoizing these functions with useCallback can prevent unnecessary renders and improve performance.

B. Stable Function References:
When using functions as dependencies in other hooks, keeping the function reference stable ensures that these hooks do not run more often than necessary.

C. Event Handlers in Listeners:
When using event handlers inside useEffect or other hooks, useCallback ensures that the same function reference is used, preventing the need for re-attaching listeners.

* useCallback memoizes functions, while useMemo memoizes the 
result of a function (value).

Example with useCallback and useMemo :
import React, { useState, useCallback, useMemo } from 'react';

export default function Parent() {
  const [count, setCount] = useState(0);
  const [text, setText] = useState('');

  const increment = useCallback(() => {
    setCount(count + 1);
  }, [count]);

  const calculation = useMemo(() => {
    return count * 2;
  }, [count]);

  return (
    <div>
      <p>Count: {count}</p>
      <p>Calculation: {calculation}</p>
      <button onClick={increment}>Increment</button>
      <input value={text} onChange={e => setText(e.target.value)} />
      <Child increment={increment} />
    </div>
  );
}

function Child({ increment }) {
  console.log('Child rendered');
  return <button onClick={increment}>Increment from Child</button>;
}

In this example :
The increment function is memoized using useCallback, so the Child component does not re-render unnecessarily when the text state changes in the Parent.
The calculation is memoized using useMemo to avoid recalculating unless the count changes.


6. React.memo and useMemo hook :
Both React.memo and useMemo are used to optimize performance by preventing unnecessary re-renders. 

* React.memo :
React.memo is a higher-order component (HOC) that wraps a functional component, providing a performance optimization by memoizing the component's output. This means that React will skip rendering the component if its props have not changed since the last render.

Example :
import React, { useState } from 'react';

const Child = React.memo(({ value }) => {
  console.log('Child rendered');
  return <div>Value: {value}</div>;
});

export default function Parent() {
  const [count, setCount] = useState(0);
  return (
    <div>
      <button onClick={() => setCount(count + 1)}>Increment</button>
      <Child value={count} />
    </div>
  );
}

In this example :
A. The Child component is memoized using React.memo.
B. The console log inside Child shows that it only re-renders when the value prop changes, not when other state changes in the Parent.

Key Concepts :

A. Shallow Comparison:
React.memo performs a shallow comparison of the previous and current props. If the props are objects or arrays, only the reference is compared, not the content.

B. Performance Optimization:
Useful for preventing unnecessary re-renders in components that depend heavily on props, especially when those components are costly to render.

C. Custom Comparison Function:
You can provide a custom comparison function as the second argument to React.memo to customize the comparison logic.

* useMemo :
useMemo is a React hook that memoizes the result of a calculation or operation, re-computing it only when its dependencies change. It helps to avoid recalculating expensive operations on every render.

syntax :
const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);

Note : Example is already given above in useCallback.

When to Use React.memo and useMemo :

A. React.memo: 
Use when you want to prevent a component from re-rendering if its props haven't changed. It's particularly useful for memoizing pure components and components that render large subtrees of the UI.

B. useMemo: Use when you have a computationally expensive calculation that should not re-run on every render. It helps in optimizing the performance by memoizing the calculation result until its dependencies change.


7. React useRef :
The useRef hook in React is a versatile tool that allows you to create a reference to an element or value that persists across re-renders. It is often used for accessing DOM elements directly, storing mutable values, and holding onto values that should not trigger a re-render when changed.

The useRef hook returns a mutable object, which has a property called current that can hold any value.

const myRef = useRef(initialValue);

A. myRef: The object returned by useRef, containing a .current property.
B. initialValue: The initial value to be assigned to the current property.

Key Concepts :

A. Persistent Value:
Unlike state, a value stored in a useRef object does not cause the component to re-render when it changes. This makes useRef suitable for storing mutable values or stateful information that does not trigger UI updates.

B. Accessing DOM Elements:
useRef can be used to access and manipulate DOM elements directly, similar to how document.getElementById or document.querySelector works in vanilla JavaScript. This is useful for actions like focusing elements, scrolling, or measuring dimensions.

C. Mutable Value Storage:
You can use useRef to store any mutable value. For example, it can store a timer ID for clearing intervals or store previous state values for comparison.

D. Avoiding Re-renders:
Since updating a ref's .current property does not trigger a re-render, useRef is often used to avoid re-renders for values that do not need to be part of the component's render cycle.

* Use Cases :

A. Managing Focus, Text Selection, or Media Playback :
useRef is commonly used for focusing input fields, selecting text, or controlling media playback, like pausing or playing a video.

B. Storing Mutable Values :
Store values that need to persist across renders without triggering re-renders, such as a counter or flag.

C. Interacting with External Libraries :
When using third-party libraries that require a DOM node reference, useRef can provide the necessary reference.

D. Tracking Component Lifecycle :
useRef can be used to track the mounting status of a component or keep a mutable state without causing re-renders, which is useful for managing subscriptions or API calls.

Example: Accessing a DOM Element :
import React, { useRef, useEffect } from 'react';
function FocusInput() {
  const inputRef = useRef(null);
  useEffect(() => {
    inputRef.current.focus(); // Focus the input element when the component mounts
  }, []);
  return <input ref={inputRef} type="text" />;
}

In this example :
A. useRef is used to create a reference (inputRef) to the input element.
B. The useEffect hook sets focus to the input element when the component mounts by accessing the DOM node through inputRef.current.

Example: Storing a Mutable Value :
import React, { useRef, useState } from 'react';

export default function Stopwatch() {
  const [seconds, setSeconds] = useState(0);
  const intervalRef = useRef(null);

  const start = () => {
    if (!intervalRef.current) {
      intervalRef.current = setInterval(() => {
        setSeconds(prevSeconds => prevSeconds + 1);
      }, 1000);
    }
  };

  const stop = () => {
    clearInterval(intervalRef.current);
    intervalRef.current = null;
  };

  return (
    <div>
      <p>Seconds: {seconds}</p>
      <button onClick={start}>Start</button>
      <button onClick={stop}>Stop</button>
    </div>
  );
}

In this example :
A. intervalRef is used to store the interval ID. This allows the interval to be cleared without triggering a re-render of the component.
B. The interval ID stored in intervalRef.current persists across renders without causing the Stopwatch component to re-render when it changes.

Best Practices :

A. Avoid Overuse :
Use useRef for its intended purposes, such as accessing DOM elements, storing mutable values, or interfacing with third-party libraries. It is not meant to replace state for values that should trigger a UI update.

B. Be Mindful of References :
Ensure that the element or value being referenced will always be available when needed. For example, accessing current on an unmounted component can lead to errors.

C. Use with Care in Concurrent Mode :
When using React's Concurrent Mode, be cautious with useRef as it might not always align with the latest render phase. This is more of an advanced topic but worth noting for complex applications.

              ** Main Hooks End **


8. React useImperativeHandle hook :
The useImperativeHandle hook in React is used to customize the instance value that is exposed when using ref in parent components. This hook is particularly useful when you want to expose a controlled interface for a child component to its parent, rather than exposing the entire child component instance.

Syntax :
useImperativeHandle(ref, createHandle, [dependencies]);

createHandle: A function that returns an object containing the properties and methods you want to expose to the parent.


9. React useLayoutEffect hook :
syntax> 
useLayoutEffect(() => {
  // Your effect code here
  return () => {
    // Cleanup code here
  };
}, [dependencies]);

Key Differences Between useEffect and useLayoutEffect :

A. Execution Timing:
useEffect runs asynchronously and after the DOM has been painted. This means it doesn't block the browser from updating the screen.
useLayoutEffect runs synchronously after DOM updates but before the browser paints the screen, making it useful for reading layout or making changes that must happen before the browser visually updates.

B. Use Cases :
Use useEffect for side effects that do not affect the layout, such as data fetching, setting up subscriptions, or logging.
Use useLayoutEffect for side effects that affect the layout or must be measured before the browser paints, such as measuring layout, applying animations,
calculating dimensions, positioning elements or making adjustments based on the DOM structure.

C. Performance :
useLayoutEffect can potentially block visual updates and slow down rendering if overused or used incorrectly. It should be used sparingly and only when necessary.


10. React useDebugValue hook :
The useDebugValue hook in React is a specialized hook designed to improve the debugging experience for custom hooks. It allows you to display custom labels or values in React DevTools, making it easier to understand and diagnose the state of your custom hooks during development.

syntax :
useDebugValue(value, [formatter]);

The useDebugValue hook is used inside custom hooks to display debug information. It takes one or two arguments:

A. value: The value or label you want to display in the React DevTools.
B. formatter (optional): A function to format the value before it is displayed. This is useful for transforming complex data into a more readable format.

* useDebugValue is intended for use in development only. It does not affect the behavior of your application or its performance in production builds.


11. React useTransition hook :
The useTransition hook in React is part of the concurrent features introduced with React 18, designed to help manage and optimize the user experience during state transitions. It allows you to mark certain updates as "transitions," which helps React manage their priority and maintain a smooth user interface by prioritizing more critical updates over less critical ones.

Key Concepts :

A. Transition Updates:
Transitions are updates that are less urgent or can be deferred to ensure the app remains responsive. For instance, a search input's suggestions might be a transition, as they donâ€™t need to be updated immediately.

B. Concurrent Mode:
useTransition is used within Concurrent Mode to allow React to manage state updates more efficiently. React can interrupt or pause less critical updates to ensure high-priority updates (like user input) are processed quickly.

The useTransition hook returns an array with two elements:
A. startTransition: A function that you use to wrap updates that you want to mark as transitions.
B. isPending: A boolean that indicates whether the transition is ongoing.

Syntax> const [isPending, startTransition] = useTransition();

* Deferred Updates :
Mark state updates related to non-critical operations as transitions, such as filtering data, loading additional content, or updating complex components.


12. React useDeferredValue hook :
The useDeferredValue hook in React is another tool introduced with React 18 to improve the user experience by deferring the update of certain values until after more urgent updates have been processed. It helps manage the prioritization of state updates, particularly in concurrent rendering scenarios, by allowing less critical updates to be deferred, thus ensuring the UI remains responsive and smooth.

syntax> const deferredValue = useDeferredValue(value);

A. value: The value you want to defer.
B. deferredValue: The deferred version of the value, which will be updated after more urgent updates are processed.


13. React useSyncExternalStore hook :
The useSyncExternalStore hook is a React hook introduced with React 18 to help synchronize external stores with React's state management. It is designed to work with external state management systems and libraries, providing a way to integrate these systems with React's concurrent rendering features.

Key Concepts :

A. External Stores :
External stores refer to state management systems or libraries outside of React's built-in state management, such as Redux, MobX, or any custom store implementations.

B. Synchronous Data :
The useSyncExternalStore hook is used to ensure that data from these external stores is kept in sync with React's rendering process. It ensures that React correctly updates and reflects changes from external stores.

C. Concurrent Mode Compatibility :
The hook is designed to work well with React's concurrent features, providing a way to handle external state updates in a way that maintains a consistent and responsive UI.

syntax :
const state = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);

* The useSyncExternalStore hook takes three arguments :

A. subscribe: A function that subscribes to the external store. It should accept a callback that will be invoked when the store changes.

B. getSnapshot: A function that retrieves the current snapshot or value from the external store.

C. getServerSnapshot: (Optional) A function that retrieves the snapshot for server-side rendering. This is useful for server-rendered applications to provide the initial state.


14. React useInsertionEffect hook :
The useInsertionEffect hook is a special hook introduced with React 18, designed to handle side effects related to the insertion of elements into the DOM. It is part of React's concurrent rendering features and is intended for use cases where you need to perform operations immediately after a component is inserted into the DOM, but before the browser has a chance to paint.

* useInsertionEffect runs synchronously after the DOM mutations but before the browser has a chance to paint. This ensures that any DOM changes or side effects are completed before the user sees the update.

syntax :
useInsertionEffect(() => {
  // Your effect code here
  return () => {
    // Cleanup code here
  };
}, [dependencies]);


15. React useId hook  :
The useId hook in React is a new hook introduced with React 18 that provides a way to generate unique IDs for elements, ensuring that these IDs are stable across server and client renders. This hook is particularly useful for generating IDs that need to be consistent between server-side rendering (SSR) and client-side rendering (CSR) to avoid mismatches and maintain proper HTML structure.

* The useId hook returns a unique ID as a string. You can use this ID to set attributes such as id on HTML elements.

syntax> const id = useId();

Example :
import React, { useId } from 'react';
export default function FormComponent() {
  const id = useId();
  return (
    <form>
      <div>
        <label htmlFor={`${id}-name`}>Name:</label>
        <input id={`${id}-name`} type="text" name="name" />
      </div>
      <div>
        <label htmlFor={`${id}-email`}>Email:</label>
        <input id={`${id}-email`} type="email" name="email" />
      </div>
    </form>
  );
}

* Hydration Compatibility :
During server-side rendering, the generated ID is included in the server-rendered HTML. When the client-side JavaScript takes over, it uses the same ID, ensuring that there are no discrepancies between the server and client renders.


16. React Custom hook  :
Custom hooks in React are a powerful feature that allows you to encapsulate and reuse stateful logic across different components. They are a way to extract component logic into reusable functions, making it easier to manage and share stateful logic without changing the component hierarchy.

Key Concepts :

A. Reusability :
Custom hooks enable you to encapsulate and reuse logic across multiple components. This avoids code duplication and promotes cleaner, more maintainable code.

B. Encapsulation :
By using custom hooks, you can encapsulate complex state logic or side effects, making it easier to manage and test these functionalities independently.

C. Hooks Composition :
Custom hooks can use other hooks (including other custom hooks), allowing you to compose multiple pieces of logic into a single reusable unit.

* A custom hook is a JavaScript function whose name starts with use and that calls other hooks. 

* Example 1: useCounter :
import { useState } from 'react';

// Custom hook for counter
export default function useCounter(initialValue = 0) {
  const [count, setCount] = useState(initialValue);

  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  const reset = () => setCount(initialValue);

  return { count, increment, decrement, reset };
}

Example 2: Using useCounter in a Component :
import React from 'react';
import useCounter from './useCounter';

export default function CounterComponent() {
  const { count, increment, decrement, reset } = useCounter(10);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
}

* Advanced Example: useFetch :
import { useState, useEffect } from 'react';

// Custom hook for data fetching
function useFetch(url) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const result = await response.json();
        setData(result);
      } catch (error) {
        setError(error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [url]);

  return { data, loading, error };
}

export default useFetch;

Example: Using useFetch in a Component :
import React from 'react';
import useFetch from './useFetch';

function DataFetchingComponent() {
  const { data, loading, error } = useFetch('https://api.example.com/data');

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error.message}</p>;

  return (
    <div>
      <h1>Data:</h1>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
}

export default DataFetchingComponent;


          ** End **
